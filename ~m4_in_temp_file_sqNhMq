m4_init()
m4_define([b4_actions], 
[b4_case(2, [b4_syncline(123, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"file_input: program ENDMARKER\n";
										p->check_inhertance_list();
						if(!p->errRecovery->errQ->isEmpty())
								p->errRecovery->printErrQueue();
						p->print_symbol();
						ast->print(]b4_rhs_value(2, 1, [[tn]])[, 0);
						Streams::verbose().flush();	
								}]])

b4_case(3, [b4_syncline(133, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"program : import_stmt ';' temp2 \n";}]])

b4_case(4, [b4_syncline(134, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"program : temp2 \n";}]])

b4_case(5, [b4_syncline(138, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"temp2: classdef temp2\n";
							ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
							cout<<"enter upper"<<endl;
						}]])

b4_case(6, [b4_syncline(142, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"temp2: classdef \n";
							//ast->createClassNode();
							cout<<"enter classdef"<<endl;
					}]])

b4_case(7, [b4_syncline(159, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
							testfunction = p->finishFunctionDeclaration(testfunction,linefunc,colmfunc);
							]b4_lhs_value([[tn]])[=ast->createFunctionNode(testfunction,]b4_rhs_value(2, 2, [[tn]])[,NULL);
							parameters.clear();
							linefunc=0;colmfunc=0;
							Streams::verbose() <<"funcdef:	funcheader suite \n";
						  }]])

b4_case(8, [b4_syncline(167, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader:	DEF  NAME parameters ARROW test ':'  \n";}]])

b4_case(9, [b4_syncline(168, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader:  DEF access NAME parameters ARROW test ':'  \n";}]])

b4_case(10, [b4_syncline(169, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,ff, ]b4_rhs_value(4, 2, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
											Streams::verbose() <<"funcheader: DEF NAME parameters ':' \n";
											
									   }]])

b4_case(11, [b4_syncline(178, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    { 
												testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,ff, ]b4_rhs_value(5, 3, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
												Streams::verbose() <<"funcheader: DEF access NAME parameters ':' \n";
											  }]])

b4_case(12, [b4_syncline(186, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF STATIC NAME parameters ARROW test ':' \n";}]])

b4_case(13, [b4_syncline(187, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF FINAL NAME parameters ARROW test ':' \n";}]])

b4_case(14, [b4_syncline(188, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
												testfunction = p->createTypeFunctionHeader(t,true,pp,pro,ff, ]b4_rhs_value(5, 3, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
												Streams::verbose() <<"funcheader: DEF STATIC NAME parameters ':' \n";
											 }]])

b4_case(15, [b4_syncline(196, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,true, ]b4_rhs_value(5, 3, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
												Streams::verbose() <<"funcheader: DEF FINAL NAME parameters ':' \n";
											 }]])

b4_case(16, [b4_syncline(204, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF STATIC FINAL NAME parameters ARROW test ':' \n";}]])

b4_case(17, [b4_syncline(205, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF FINAL STATIC NAME parameters ARROW test ':'  \n";}]])

b4_case(18, [b4_syncline(206, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
														Streams::verbose() <<"funcheader: DEF STATIC FINAL NAME parameters ':'  \n";
												    }]])

b4_case(19, [b4_syncline(214, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
													Streams::verbose() <<"funcheader: DEF FINAL STATIC NAME parameters ':'  \n";
													}]])

b4_case(20, [b4_syncline(222, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,true, ]b4_rhs_value(8, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
																Streams::verbose() <<"funcheader: DEF FINAL access NAME parameters ARROW test ':'  \n";
															  }]])

b4_case(21, [b4_syncline(230, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF STATIC access NAME parameters ARROW test ':'  \n";}]])

b4_case(22, [b4_syncline(231, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											testfunction = p->createTypeFunctionHeader(t,true,pp,pro,ff, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
														colmfunc=yylval.r.colNum;Streams::verbose() <<"funcheader: DEF STATIC access NAME parameters ':'  \n";
													}]])

b4_case(23, [b4_syncline(238, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,true, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
														Streams::verbose() <<"funcheader: DEF STATIC access NAME parameters ':' ";
													}]])

b4_case(24, [b4_syncline(246, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF STATIC FINAL access NAME parameters ARROW test ':'  \n";}]])

b4_case(25, [b4_syncline(247, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF FINAL STATIC access NAME parameters ARROW test ':'  \n";}]])

b4_case(26, [b4_syncline(248, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
															Streams::verbose() <<"funcheader: DEF STATIC FINAL access NAME parameters ':'  \n";
														  }]])

b4_case(27, [b4_syncline(256, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
															colmfunc=yylval.r.colNum;Streams::verbose() <<"funcheader: DEF FINAL STATIC access NAME parameters ':'  \n";
														  }]])

b4_case(28, [b4_syncline(263, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF access STATIC NAME parameters ARROW test ':'  \n";}]])

b4_case(29, [b4_syncline(264, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF access FINAL NAME parameters ARROW test ':'  \n";}]])

b4_case(30, [b4_syncline(265, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														testfunction = p->createTypeFunctionHeader(t,true,pp,pro,ff, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
														Streams::verbose() <<"funcheader: DEF access STATIC NAME parameters ':'  \n";
													}]])

b4_case(31, [b4_syncline(273, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														testfunction = p->createTypeFunctionHeader(t,ss,pp,pro,true, ]b4_rhs_value(6, 4, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
														Streams::verbose() <<"funcheader: DEF access FINAL NAME parameters ':'  \n";
													}]])

b4_case(32, [b4_syncline(281, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF access STATIC FINAL NAME parameters ARROW test ':'  \n";}]])

b4_case(33, [b4_syncline(282, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF access FINAL STATIC NAME parameters ARROW test ':'  \n";}]])

b4_case(34, [b4_syncline(283, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
											colmfunc=yylval.r.colNum;
															Streams::verbose() <<"funcheader: DEF access STATIC FINAL NAME parameters ':'  \n";
			   											  }]])

b4_case(35, [b4_syncline(291, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
															colmfunc=yylval.r.colNum;Streams::verbose() <<"funcheader: DEF access FINAL STATIC NAME parameters ':'  \n";
			  											  }]])

b4_case(36, [b4_syncline(298, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF STATIC access FINAL NAME parameters ARROW test ':'  \n";}]])

b4_case(37, [b4_syncline(299, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"funcheader: DEF FINAL access STATIC NAME parameters ARROW test ':'  \n";}]])

b4_case(38, [b4_syncline(300, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
															colmfunc=yylval.r.colNum;Streams::verbose() <<"funcheader: DEF STATIC access FINAL NAME parameters ':'  \n";
			  											  }]])

b4_case(39, [b4_syncline(307, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															testfunction = p->createTypeFunctionHeader(t,true,pp,pro,true, ]b4_rhs_value(7, 5, [[r.strVal]])[,parameters,yylval.r.lineNum, yylval.r.colNum);
											pp=true;ff=false;ss=false;pro=false;
											parameters.clear();
											linefunc=yylval.r.lineNum;
															colmfunc=yylval.r.colNum;Streams::verbose() <<"funcheader: DEF FINAL access STATIC NAME parameters ':'  \n";
														  }]])

b4_case(40, [b4_syncline(316, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"parameters:'(' arglist ')'\n";}]])

b4_case(41, [b4_syncline(317, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"parameters:'(' ')'\n";}]])

b4_case(42, [b4_syncline(320, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;	Streams::verbose() <<"stmt:	simple_stmt \n";
						]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
					}]])

b4_case(43, [b4_syncline(323, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;	Streams::verbose() <<"stmt: compound_stmt\n";}]])

b4_case(44, [b4_syncline(325, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"simple_stmt: small_stmt ';' \n";
								]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 1, [[tn]])[;
							}]])

b4_case(45, [b4_syncline(329, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: expr_stmt \n";
							]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
						}]])

b4_case(46, [b4_syncline(332, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: del_stmt \n";}]])

b4_case(47, [b4_syncline(333, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: pass_stmt \n";}]])

b4_case(48, [b4_syncline(334, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: flow_stmt \n";}]])

b4_case(49, [b4_syncline(335, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: import_stmt \n";}]])

b4_case(50, [b4_syncline(336, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: global_stmt \n";}]])

b4_case(51, [b4_syncline(337, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: nonlocal_stmt \n";}]])

b4_case(52, [b4_syncline(338, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"small_stmt: print_stmt \n";}]])

b4_case(53, [b4_syncline(341, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"expr_stmt:	testlist_star_expr augassign testlist \n";}]])

b4_case(54, [b4_syncline(342, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"expr_stmt: testlist_star_expr \n";}]])

b4_case(55, [b4_syncline(343, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"expr_stmt: testlist_star_expr right_testlist \n";
													//$][<amerstr>1;
													visit_num=0;
													ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
													Node* p=new Node();
													p=ast->createAssignNode(]b4_rhs_value(2, 1, [[tn]])[,NULL);
													if(lastNode)
													{
													cout<<"enter heree amer \n";
														]b4_lhs_value([[tn]])[=ast->addNext(lastNode,k);
														lastNode=NULL;
													}
													else
														]b4_lhs_value([[tn]])[=p;
													
													
												}]])

b4_case(56, [b4_syncline(362, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"right_testlist: '=' testlist_star_expr right_testlist \n";}]])

b4_case(57, [b4_syncline(363, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"right_testlist: '=' testlist_star_expr \n";]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;}]])

b4_case(58, [b4_syncline(366, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_star_expr: comma_test_star_seqJ \n";}]])

b4_case(59, [b4_syncline(367, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_star_expr: comma_test_star_seqJ ',' \n";}]])

b4_case(60, [b4_syncline(368, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"',' \n";}]])

b4_case(61, [b4_syncline(369, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_star_expr: test comma_test_star_seqJ \n";}]])

b4_case(62, [b4_syncline(370, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
								Streams::verbose() <<"testlist_star_expr: test \n"; 
								]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
							}]])

b4_case(63, [b4_syncline(374, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_star_expr: star_expr comma_test_star_seqJ ',' \n";}]])

b4_case(64, [b4_syncline(375, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_star_expr: star_expr ',' \n";}]])

b4_case(65, [b4_syncline(378, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star : ',' test \n";}]])

b4_case(66, [b4_syncline(379, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star : ',' star_expr \n";}]])

b4_case(67, [b4_syncline(382, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seqJ : comma_test_star_seqJ comma_test_star \n";}]])

b4_case(68, [b4_syncline(383, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seqJ : comma_test_star \n";}]])

b4_case(69, [b4_syncline(385, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	PLUS_EQUAL \n";}]])

b4_case(70, [b4_syncline(386, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	MINUS_EQUAL \n";}]])

b4_case(71, [b4_syncline(387, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	STAR_EQUAL \n";}]])

b4_case(72, [b4_syncline(388, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	DIV_EQUAL \n";}]])

b4_case(73, [b4_syncline(389, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	MOD_EQUAL \n";}]])

b4_case(74, [b4_syncline(390, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	AND_EQUAL \n";}]])

b4_case(75, [b4_syncline(391, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	OR_EQUAL \n";}]])

b4_case(76, [b4_syncline(392, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	SHAPOO_EQUAL \n";}]])

b4_case(77, [b4_syncline(393, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	LESS_THAN_2_EQUAL \n";}]])

b4_case(78, [b4_syncline(394, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	MORE_THAN_2_EQUAL \n";}]])

b4_case(79, [b4_syncline(395, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	STAR_2_EQUAL \n";}]])

b4_case(80, [b4_syncline(396, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"augassign:	DIV_2_EQUAL \n";}]])

b4_case(81, [b4_syncline(399, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose()<<"access_modef: PRIVATE\n";acc_mod="private";pp=true;}]])

b4_case(82, [b4_syncline(400, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {pp=false;Streams::verbose()<<"access_modef:	PUBLIC\n";acc_mod="public";pp=false;}]])

b4_case(83, [b4_syncline(401, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {pro=true;Streams::verbose()<<"access_modef:	PROTECTED\n";acc_mod="protected";}]])

b4_case(84, [b4_syncline(403, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"print_stmt: PRINT exprlist \n";}]])

b4_case(85, [b4_syncline(404, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"del_stmt:   DEL exprlist \n";}]])

b4_case(86, [b4_syncline(407, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"pass_stmt:	PASS \n";}]])

b4_case(87, [b4_syncline(410, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"flow_stmt:	break_stmt \n";}]])

b4_case(88, [b4_syncline(411, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"flow_stmt: continue_stmt\n";}]])

b4_case(89, [b4_syncline(412, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"flow_stmt: return_stmt\n";}]])

b4_case(90, [b4_syncline(415, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"break_stmt: BREAK \n";}]])

b4_case(91, [b4_syncline(418, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"continue_stmt:	CONTINUE \n";}]])

b4_case(92, [b4_syncline(421, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"return_stmt:	RETURN testlist \n";}]])

b4_case(93, [b4_syncline(422, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"return_stmt:	RETURN \n";}]])

b4_case(94, [b4_syncline(426, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"import_stmt: import_name \n";}]])

b4_case(95, [b4_syncline(429, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"import_name: IMPORT dotted_as_names \n";}]])

b4_case(96, [b4_syncline(432, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_dotted_as_name_seq: ',' dotted_as_name \n";}]])

b4_case(97, [b4_syncline(433, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_dotted_as_name_seq: comma_dotted_as_name_seq ',' dotted_as_name \n";}]])

b4_case(98, [b4_syncline(435, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									Streams::verbose() <<"comma_dotted_as_name_seq: dotted_as_names: dotted_as_name \n";
								t_id=new char@{10@};
								strcpy(t_id,temp_id.c_str());
								inhertance_list.push_back(t_id);
								temp_id="";
					}]])

b4_case(99, [b4_syncline(442, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() <<"comma_dotted_as_name_seq: dotted_as_name comma_dotted_as_name_seq \n";
						t_id=new char@{10@};
								strcpy(t_id,temp_id.c_str());
								inhertance_list.push_back(t_id);
								temp_id="";
				 }]])

b4_case(100, [b4_syncline(452, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dotted_as_name: dotted_name \n";}]])

b4_case(101, [b4_syncline(453, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dotted_as_name: dotted_name AS NAME\n";}]])

b4_case(102, [b4_syncline(456, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dotted_name: NAME \n"; temp_id=temp_id+]b4_rhs_value(1, 1, [[r.strVal]])[;}]])

b4_case(103, [b4_syncline(457, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dotted_name: NAME dotted_name_seq \n";}]])

b4_case(104, [b4_syncline(460, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
							Streams::verbose() <<"dotted_name_seq: '.' NAME \n";
							temp_id=temp_id+"."+]b4_rhs_value(2, 2, [[r.strVal]])[;
						}]])

b4_case(105, [b4_syncline(464, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
												Streams::verbose() <<"dotted_name_seq: dotted_name_seq '.' NAME \n";
					temp_id=temp_id+"."+]b4_rhs_value(3, 3, [[r.strVal]])[;
				 }]])

b4_case(106, [b4_syncline(470, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_name_seq :	',' NAME \n";}]])

b4_case(107, [b4_syncline(471, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_name_seq :	comma_name_seq ',' NAME \n";}]])

b4_case(108, [b4_syncline(474, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"global_stmt: GLOBAL NAME \n";}]])

b4_case(109, [b4_syncline(475, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"global_stmt: GLOBAL NAME comma_name_seq\n";}]])

b4_case(110, [b4_syncline(478, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"nonlocal_stmt:	NONLOCAL NAME \n";}]])

b4_case(111, [b4_syncline(479, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"nonlocal_stmt: NONLOCAL NAME comma_name_seq \n";}]])

b4_case(112, [b4_syncline(482, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"compound_stmt:  if_stmt \n";}]])

b4_case(113, [b4_syncline(483, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"compound_stmt: while_stmt\n";}]])

b4_case(114, [b4_syncline(484, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"compound_stmt: for_stmt\n";}]])

b4_case(115, [b4_syncline(485, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"compound_stmt: try_stmt\n";}]])

b4_case(116, [b4_syncline(486, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"compound_stmt: with_stmt\n";}]])

b4_case(117, [b4_syncline(488, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	
								Streams::verbose() <<"compound_stmt: funcdef\n";
								]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
							}]])

b4_case(118, [b4_syncline(492, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									Streams::verbose() <<"compound_stmt: DEF classdef\n";
									]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
								}]])

b4_case(119, [b4_syncline(498, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"elif_seq :  ELIF test ':' suite \n";}]])

b4_case(120, [b4_syncline(499, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"elif_seq : elif_seq ELIF test ':' suite \n";}]])

b4_case(121, [b4_syncline(502, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"if_stmt:	IF test ':' suite \n";}]])

b4_case(122, [b4_syncline(503, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"if_stmt:	IF test ':' suite elif_seq \n";}]])

b4_case(123, [b4_syncline(504, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"if_stmt:	IF test ':' suite ELSE ':' suite \n";}]])

b4_case(124, [b4_syncline(505, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"if_stmt:	IF test ':' suite elif_seq ELSE ':' suite \n";}]])

b4_case(125, [b4_syncline(508, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"while_stmt: WHILE test ':' suite \n";}]])

b4_case(126, [b4_syncline(509, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"while_stmt:  WHILE test ':' suite ELSE ':' suite \n";}]])

b4_case(127, [b4_syncline(512, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"for_stmt:   FOR exprlist IN testlist ':' suite \n";}]])

b4_case(128, [b4_syncline(513, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"for_stmt:  FOR exprlist IN testlist ':' suite ELSE ':' suite\n";}]])

b4_case(129, [b4_syncline(516, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<" try_stmt:   TRY ':' suite try_except_cla_seq\n";}]])

b4_case(130, [b4_syncline(517, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<" try_stmt: TRY ':' suite try_except_cla_seq ELSE ':' suite\n";}]])

b4_case(131, [b4_syncline(518, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"try_stmt:  TRY ':' suite try_except_cla_seq FINALLY ':' suite\n";}]])

b4_case(132, [b4_syncline(519, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"try_stmt:  TRY ':' suite FINALLY ':' suite\n";}]])

b4_case(133, [b4_syncline(522, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"try_except_cla_seq: except_clause ':' suite \n";}]])

b4_case(134, [b4_syncline(523, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"try_except_cla_seq: try_except_cla_seq except_clause ':' suite\n";}]])

b4_case(135, [b4_syncline(526, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"with_seq:	',' with_item \n";}]])

b4_case(136, [b4_syncline(527, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"with_seq: with_seq ',' with_item\n";}]])

b4_case(137, [b4_syncline(530, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"with_stmt:  WITH with_item ':' suite \n";}]])

b4_case(138, [b4_syncline(531, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"with_stmt: WITH with_item with_seq ':' suite\n";}]])

b4_case(139, [b4_syncline(534, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<" with_item:  test\n";}]])

b4_case(140, [b4_syncline(535, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"with_item: test AS expr\n";}]])

b4_case(141, [b4_syncline(538, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"except_clause:  EXCEPT \n";}]])

b4_case(142, [b4_syncline(539, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"except_clause:  EXCEPT test\n";}]])

b4_case(143, [b4_syncline(540, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"except_clause:  EXCEPT test AS NAME\n";}]])

b4_case(144, [b4_syncline(543, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;	Streams:: verbose() <<"list_stmt : stmt\n";}]])

b4_case(145, [b4_syncline(544, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams:: verbose() <<"list_stmt : stmt list_stmt\n";
						ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
						]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 1, [[tn]])[;	
			}]])

b4_case(146, [b4_syncline(550, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
							Streams::verbose() <<"suite:	list_stmt END\n";
							]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 1, [[tn]])[;	
						}]])

b4_case(147, [b4_syncline(554, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	]b4_lhs_value([[tn]])[=NULL;	Streams::verbose() <<"suite:	END\n"; ]b4_lhs_value([[tn]])[=NULL;}]])

b4_case(148, [b4_syncline(557, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"test:	or_test\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(149, [b4_syncline(558, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_test IF or_test ELSE test\n";}]])

b4_case(150, [b4_syncline(561, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_seq:	OR and_test \n";}]])

b4_case(151, [b4_syncline(562, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_seq: or_seq OR and_test \n";}]])

b4_case(152, [b4_syncline(565, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_test:	and_test\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(153, [b4_syncline(566, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_test:	and_test or_seq\n";}]])

b4_case(154, [b4_syncline(569, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_seq: AND not_test \n";}]])

b4_case(155, [b4_syncline(570, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_seq: and_seq AND not_test \n";}]])

b4_case(156, [b4_syncline(573, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_test:	not_test\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(157, [b4_syncline(574, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_test: not_test and_seq \n";}]])

b4_case(158, [b4_syncline(577, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"not_test:	NOT not_test\n";}]])

b4_case(159, [b4_syncline(578, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"not_test:	comparison\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(160, [b4_syncline(581, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op_seq: comp_op expr \n";}]])

b4_case(161, [b4_syncline(582, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op_seq: comp_op_seq comp_op expr \n";}]])

b4_case(162, [b4_syncline(585, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comparison: expr\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(163, [b4_syncline(586, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comparison: expr comp_op_seq\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 1, [[tn]])[;}]])

b4_case(164, [b4_syncline(589, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: '<' \n";}]])

b4_case(165, [b4_syncline(590, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: '>' \n";}]])

b4_case(166, [b4_syncline(591, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: EQUAL \n";}]])

b4_case(167, [b4_syncline(592, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: MORE_OR_EQUAL \n";}]])

b4_case(168, [b4_syncline(593, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: LESS_OR_EQUAL \n";}]])

b4_case(169, [b4_syncline(594, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: MORE_LESS \n";}]])

b4_case(170, [b4_syncline(595, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: NOT_EQUAL \n";}]])

b4_case(171, [b4_syncline(596, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: IN \n";}]])

b4_case(172, [b4_syncline(597, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: NOT IN \n";}]])

b4_case(173, [b4_syncline(598, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: IS \n";}]])

b4_case(174, [b4_syncline(599, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_op: IS NOT \n";}]])

b4_case(175, [b4_syncline(602, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"star_expr: '*' expr \n";}]])

b4_case(176, [b4_syncline(605, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_xor_expr_seq: '|' xor_expr \n";}]])

b4_case(177, [b4_syncline(606, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"or_xor_expr_seq: or_xor_expr_seq '|' xor_expr\n";}]])

b4_case(178, [b4_syncline(608, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
					Streams::verbose() <<"expr: xor_expr\n";
					]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
				}]])

b4_case(179, [b4_syncline(612, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"expr: xor_expr or_xor_expr_seq\n";}]])

b4_case(180, [b4_syncline(615, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"sha_and_expr_seq: '^' and_expr \n";}]])

b4_case(181, [b4_syncline(616, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"sha_and_expr_seq: sha_and_expr_seq '^' and_expr\n";}]])

b4_case(182, [b4_syncline(619, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"xor_expr: and_expr\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(183, [b4_syncline(620, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"xor_expr: and_expr sha_and_expr_seq\n";}]])

b4_case(184, [b4_syncline(623, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_shift_expr_seq: '&' shift_expr \n";}]])

b4_case(185, [b4_syncline(624, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_shift_expr_seq: and_shift_expr_seq '&' shift_expr\n";}]])

b4_case(186, [b4_syncline(627, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_expr: shift_expr\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(187, [b4_syncline(628, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"and_expr: shift_expr and_shift_expr_seq\n";}]])

b4_case(188, [b4_syncline(631, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arith_seq:	LESS_THAN_2 arith_expr \n";}]])

b4_case(189, [b4_syncline(632, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arith_seq:	MORE_THAN_2 arith_expr \n";}]])

b4_case(190, [b4_syncline(633, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arith_seq:	arith_seq LESS_THAN_2 arith_expr \n";}]])

b4_case(191, [b4_syncline(634, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arith_seq:	arith_seq MORE_THAN_2 arith_expr \n";}]])

b4_case(192, [b4_syncline(637, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
							Streams::verbose() <<"shift_expr: arith_expr\n";
							]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
						}]])

b4_case(193, [b4_syncline(641, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"shift_expr: arith_expr arith_seq\n";}]])

b4_case(194, [b4_syncline(644, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term_seq : '+' term \n";
						op=PLUS;
						]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
						}]])

b4_case(195, [b4_syncline(648, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term_seq : '-' term \n";
							op=MINUS;
							]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
						}]])

b4_case(196, [b4_syncline(652, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term_seq : term_seq '+' term \n";op=PLUS;
									k=ast->addNext(]b4_rhs_value(3, 1, [[tn]])[,]b4_rhs_value(3, 2, [[tn]])[);
									//ValueNode* v = static_cast<ValueNode*>(k);
									//cout << "value is in term_seq " << v->get_value()<<endl;
									]b4_lhs_value([[tn]])[ = ast->createExprNode(]b4_rhs_value(3, 1, [[tn]])[,NULL,op);
								}]])

b4_case(197, [b4_syncline(658, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term_seq : term_seq '-' term \n";op=MINUS;
									k=ast->addNext(]b4_rhs_value(3, 1, [[tn]])[,]b4_rhs_value(3, 2, [[tn]])[);
									]b4_lhs_value([[tn]])[ = ast->createExprNode(k,NULL,op);
								}]])

b4_case(198, [b4_syncline(664, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arith_expr: term\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
									
							}]])

b4_case(199, [b4_syncline(667, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() <<"arith_expr: term term_seq\n";
											k=ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
											//cout<<"op= "<<op<<endl;
											]b4_lhs_value([[tn]])[ = ast->createExprNode(]b4_rhs_value(2, 1, [[tn]])[,NULL,op);
											
										}]])

b4_case(200, [b4_syncline(677, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: '*' factor \n";
							op=MULT;
							]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
						}]])

b4_case(201, [b4_syncline(681, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: '/' factor \n";
								op=DIV;
							]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
							}]])

b4_case(202, [b4_syncline(685, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: '%' factor \n";
								op=MOD;
							]b4_lhs_value([[tn]])[=]b4_rhs_value(2, 2, [[tn]])[;
							}]])

b4_case(203, [b4_syncline(689, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: DIV_2 factor \n";}]])

b4_case(204, [b4_syncline(690, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: factor_seq '*' factor \n";
									op=MULT;
									]b4_lhs_value([[tn]])[ = ast->createExprNode(NULL,NULL,op);
									}]])

b4_case(205, [b4_syncline(694, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: factor_seq '/' factor \n";
									op=DIV;
									]b4_lhs_value([[tn]])[ = ast->createExprNode(NULL,NULL,op);
									}]])

b4_case(206, [b4_syncline(698, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: factor_seq '%' factor \n";
									op=MOD;
									]b4_lhs_value([[tn]])[ = ast->createExprNode(NULL,NULL,op);
									}]])

b4_case(207, [b4_syncline(702, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor_seq: factor_seq DIV_2 factor \n";}]])

b4_case(208, [b4_syncline(705, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term: 	factor\n";]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;}]])

b4_case(209, [b4_syncline(706, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"term: 	factor factor_seq\n";
								]b4_lhs_value([[tn]])[ = ast->createExprNode(NULL,NULL,op);
							}]])

b4_case(210, [b4_syncline(711, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor: '+' factor \n";}]])

b4_case(211, [b4_syncline(712, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor: '-' factor \n";}]])

b4_case(212, [b4_syncline(713, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"factor: '~' factor \n";}]])

b4_case(213, [b4_syncline(714, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
					visit_num++;
					Streams::verbose() <<"factor: power\n";
					
					if(visit_num==1)
					{
						//$][<var>$][=p->checkVariable(const_cast<char *>(temp_id2.back().c_str()),t, yylval.r.lineNum, yylval.r.colNum,true,is_list,is_dic);
						char* xx = const_cast<char *>(temp_id2.back().c_str());
						char buffer@{15@};
						bool found = false;
						sprintf(buffer, xx);
						char* tokenPtr = strtok(buffer, ".");
						char* tokenPtr2 = strtok(NULL, ".");
						if(tokenPtr!=NULL)
						{
							if((strcmp(tokenPtr,"self")==0)&&(tokenPtr2!=NULL))
							{
								//tokenPtr = strtok(NULL, ".");
								//$][<var>$][=p->addVariableToCurrentScope(tokenPtr,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,0,0,true);
								cout<<"amrr "<<temp_id2.back()<<endl;
								string h=temp_id2.back().substr(5);
								]b4_lhs_value([[var]])[=p->checkVariable(const_cast<char *>(h.c_str()),t, yylval.r.lineNum, yylval.r.colNum,true,is_list,is_dic,true);
								v=]b4_lhs_value([[var]])[;
								if(v!=NULL)
								{
									]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);

									//ast->addNext(lastNodeinType,$][<tn>$][);
									]b4_lhs_value([[tn]])[=ast->createCallVarNode(temp_id2.back(),v,NULL,NULL);
								}
								
							}	
							else
							{
								
								]b4_lhs_value([[var]])[=p->checkVariable(const_cast<char *>(temp_id2.back().c_str()),t, yylval.r.lineNum, yylval.r.colNum,true,is_list,is_dic);
								v=]b4_lhs_value([[var]])[;
								if(v!=NULL)
								{
									//cout<<"hellow world  "<<v->get_name()<<endl;
									lastNode=ast->createIDNode(v,0,0);
									
									]b4_lhs_value([[tn]])[=ast->createCallVarNode(temp_id2.back(),v,NULL,NULL);	
								}
								else
								{
									]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
								}
								
							}
						}
						else
						{
							]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
						}
						
						//v=new variable();
					}
					else
					{
						]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
					}
					
					//ast->addNext(lastNode,$][<tn>$][);
				}]])

b4_case(214, [b4_syncline(781, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"trailer_seq: trailer \n";
										]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
									}]])

b4_case(215, [b4_syncline(784, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"trailer_seq: trailer_seq trailer \n";
										]b4_lhs_value([[tn]])[=ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
									}]])

b4_case(216, [b4_syncline(789, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"power:	atom\n";
							//$][<tn>$][=ast->createCallVarNode(temp_id2.back(),NULL,NULL,NULL);
							]b4_lhs_value([[tn]])[=]b4_rhs_value(1, 1, [[tn]])[;
							
							}]])

b4_case(217, [b4_syncline(794, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"power: atom trailer_seq \n";
											cout<<"the top is "<<temp_id2.back()<<endl;
											]b4_lhs_value([[tn]])[=ast->addNext(]b4_rhs_value(2, 1, [[tn]])[,]b4_rhs_value(2, 2, [[tn]])[);
											]b4_lhs_value([[tn]])[=ast->createDotNode(]b4_lhs_value([[tn]])[,NULL);
										}]])

b4_case(218, [b4_syncline(799, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"power: atom trailer_seq STAR_2 factor \n";}]])

b4_case(219, [b4_syncline(800, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"power: atom STAR_2 factor \n";}]])

b4_case(220, [b4_syncline(803, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"str_seq:	STRING \n";}]])

b4_case(221, [b4_syncline(804, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"str_seq:	str_seq STRING \n";}]])

b4_case(222, [b4_syncline(807, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom:	'(' ')' \n";}]])

b4_case(223, [b4_syncline(808, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom:	'(' testlist_comp ')' \n";}]])

b4_case(224, [b4_syncline(809, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom:	'@{' '@}' \n";}]])

b4_case(225, [b4_syncline(810, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: '{' '}' \n";}]])

b4_case(226, [b4_syncline(811, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: '{' '}' \n";}]])

b4_case(227, [b4_syncline(812, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: '{' dictorsetmaker '}' \n";}]])

b4_case(228, [b4_syncline(813, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    { Streams::verbose() <<"atom: NAME\n";
									temp_id2.push_back(]b4_rhs_value(1, 1, [[r.strVal]])[);
									]b4_lhs_value([[tn]])[=ast->createCallVarNode(]b4_rhs_value(1, 1, [[r.strVal]])[,NULL,NULL,NULL);
					}]])

b4_case(229, [b4_syncline(817, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    { Streams::verbose() <<"atom: NAME\n";
									temp_id2.push_back(]b4_rhs_value(3, 1, [[r.strVal]])[);
									]b4_lhs_value([[tn]])[=ast->createCallFunctionNode(]b4_rhs_value(3, 1, [[r.strVal]])[,NULL,NULL,NULL,NULL);
					}]])

b4_case(230, [b4_syncline(821, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    { Streams::verbose() <<"atom: NAME\n";
									temp_id2.push_back(]b4_rhs_value(4, 1, [[r.strVal]])[);
									]b4_lhs_value([[tn]])[=ast->createCallFunctionNode(]b4_rhs_value(4, 1, [[r.strVal]])[,NULL,NULL,NULL,NULL);
					}]])

b4_case(231, [b4_syncline(825, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"trailer:	'@{' subscriptlist '@}'\n";
											
										}]])

b4_case(232, [b4_syncline(828, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF NAME\n";
											]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(2, 2, [[r.strVal]])[,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,0,0);
										v=]b4_lhs_value([[var]])[;
									]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
									}]])

b4_case(233, [b4_syncline(833, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF access NAME\n";
											Streams::verbose()<<"var_declaration: access_modef ID\n";
									]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(3, 3, [[r.strVal]])[,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false,false);
									v=]b4_lhs_value([[var]])[;
									acc_mod="";
									]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
											}]])

b4_case(234, [b4_syncline(840, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF STATIC NAME\n";
											Streams::verbose()<<"var_declaration: STATIC ID\n";
											]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(3, 3, [[r.strVal]])[,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false,false);
											v=]b4_lhs_value([[var]])[;
											]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
										}]])

b4_case(235, [b4_syncline(846, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF FINAL NAME\n";
												Streams::verbose()<<"var_declaration: FINAL ID\n";
												]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(3, 3, [[r.strVal]])[,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
										}]])

b4_case(236, [b4_syncline(852, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF STATIC FINAL NAME\n";
													Streams::verbose()<<"var_declaration: STATIC FINAL ID\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
												}]])

b4_case(237, [b4_syncline(858, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF FINAL STATIC NAME\n";
													Streams::verbose()<<"var_declaration: STATIC FINAL ID\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
												}]])

b4_case(238, [b4_syncline(864, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF STATIC access NAME\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													acc_mod="";
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
												}]])

b4_case(239, [b4_syncline(870, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF FINAL access NAME\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													acc_mod="";
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
												}]])

b4_case(240, [b4_syncline(876, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF STATIC FINAL access NAME\n";
															]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
															v=]b4_lhs_value([[var]])[;
															acc_mod="";
															]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
														}]])

b4_case(241, [b4_syncline(882, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF FINAL STATIC access NAME\n";
															]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
															v=]b4_lhs_value([[var]])[;
															acc_mod="";
															]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
														}]])

b4_case(242, [b4_syncline(888, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF access STATIC NAME\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													acc_mod="";
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
												}]])

b4_case(243, [b4_syncline(894, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF access FINAL NAME\n";
													]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(4, 4, [[r.strVal]])[,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false,false);
													v=]b4_lhs_value([[var]])[;
													acc_mod="";
													]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
											}]])

b4_case(244, [b4_syncline(900, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF access STATIC FINAL NAME\n";
														]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
														v=]b4_lhs_value([[var]])[;
														acc_mod="";
														]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
													}]])

b4_case(245, [b4_syncline(906, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF access FINAL STATIC NAME\n";
														]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
														v=]b4_lhs_value([[var]])[;
														acc_mod="";
														]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
													}]])

b4_case(246, [b4_syncline(912, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF STATIC access FINAL NAME\n";
															]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
															v=]b4_lhs_value([[var]])[;
															acc_mod="";
															]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
														}]])

b4_case(247, [b4_syncline(918, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DEF FINAL access STATIC NAME\n";
														]b4_lhs_value([[var]])[=p->addVariableToCurrentScope(]b4_rhs_value(5, 5, [[r.strVal]])[,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false,false);
														v=]b4_lhs_value([[var]])[;
														acc_mod="";
														]b4_lhs_value([[tn]])[ = ast->createIDNode(v,0,0);
													}]])

b4_case(248, [b4_syncline(924, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: NUMBER_INT\n";
						int* xx = new int (]b4_rhs_value(1, 1, [[r.intVal]])[);
						//cout<<"yhe number is"<<*xx<<endl;
						//cout<<"reference"<<xx<<endl;
						constant=true;
						]b4_lhs_value([[tn]])[ = ast->createTypeNode((void*)xx,0,0,INT);
						visit_num++;
						}]])

b4_case(249, [b4_syncline(932, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: NUMBER_FLOAT\n";
							constant=true;
							float* x=new float(]b4_rhs_value(1, 1, [[r.floatVal]])[);
							]b4_lhs_value([[tn]])[ = ast->createTypeNode((void*)x,0,0,FLOAT);
						}]])

b4_case(250, [b4_syncline(937, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: NUMBER_FLOAT\n";
							long *xxx=new long(]b4_rhs_value(1, 1, [[r.longVal]])[);
							constant=true;
							]b4_lhs_value([[tn]])[ = ast->createTypeNode(&xxx,0,0,LONG);
						}]])

b4_case(251, [b4_syncline(942, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: CHAR_VALUE\n";}]])

b4_case(252, [b4_syncline(943, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: str_seq\n";
									
									]b4_lhs_value([[tn]])[ = ast->createTypeNode(]b4_rhs_value(1, 1, [[r.strVal]])[,0,0,STRINGS);
								}]])

b4_case(253, [b4_syncline(947, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: DOT_3\n";}]])

b4_case(254, [b4_syncline(948, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: NONE\n";}]])

b4_case(255, [b4_syncline(949, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: TRUE\n";
					]b4_lhs_value([[tn]])[ = ast->createTypeNode(]b4_rhs_value(1, 1, [[r.strVal]])[,0,0,True);
				}]])

b4_case(256, [b4_syncline(952, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"atom: FALSE\n";
					]b4_lhs_value([[tn]])[ = ast->createTypeNode(]b4_rhs_value(1, 1, [[r.strVal]])[,0,0,False);
				}]])

b4_case(257, [b4_syncline(957, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seq: ',' test\n";}]])

b4_case(258, [b4_syncline(958, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seq: ',' star_expr\n";}]])

b4_case(259, [b4_syncline(959, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seq: comma_test_star_seq ',' test\n";}]])

b4_case(260, [b4_syncline(960, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_star_seq: comma_test_star_seq ',' star_expr\n";}]])

b4_case(261, [b4_syncline(963, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: test comp_for\n";}]])

b4_case(262, [b4_syncline(964, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: test\n";}]])

b4_case(263, [b4_syncline(965, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: test   comma_test_star_seq\n";}]])

b4_case(264, [b4_syncline(966, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(265, [b4_syncline(967, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(266, [b4_syncline(968, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(267, [b4_syncline(969, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(268, [b4_syncline(970, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(269, [b4_syncline(971, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(270, [b4_syncline(972, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist_comp: comma_test_star_seq ',' star_expr\n";}]])

b4_case(271, [b4_syncline(975, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"trailer:	'.' NAME\n";
							temp_id=temp_id2.back();
							temp_id=temp_id+"."+]b4_rhs_value(2, 2, [[r.strVal]])[;
						temp_id2.pop_back();
						temp_id2.push_back(temp_id);	
						]b4_lhs_value([[tn]])[=ast->createCallVarNode(]b4_rhs_value(2, 2, [[r.strVal]])[,NULL,NULL,NULL);
						}]])

b4_case(272, [b4_syncline(982, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									]b4_lhs_value([[tn]])[=ast->createCallFunctionNode(]b4_rhs_value(4, 2, [[r.strVal]])[,NULL,NULL,NULL,NULL);
								}]])

b4_case(273, [b4_syncline(985, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									]b4_lhs_value([[tn]])[=ast->createCallFunctionNode(]b4_rhs_value(5, 2, [[r.strVal]])[,NULL,NULL,NULL,NULL);
								}]])

b4_case(274, [b4_syncline(988, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"trailer:	'@{' subscriptlist '@}'\n";}]])

b4_case(275, [b4_syncline(992, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_subscript_seq: ',' subscript\n";}]])

b4_case(276, [b4_syncline(993, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_subscript_seq: comma_subscript_seq ',' subscript\n";}]])

b4_case(277, [b4_syncline(996, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscriptlist:	subscript\n";}]])

b4_case(278, [b4_syncline(997, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscriptlist:	subscript comma_subscript_seq\n";}]])

b4_case(279, [b4_syncline(998, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscriptlist:	subscript  ','\n";}]])

b4_case(280, [b4_syncline(999, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscriptlist:	subscript comma_subscript_seq ','\n";}]])

b4_case(281, [b4_syncline(1002, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  test\n";}]])

b4_case(282, [b4_syncline(1003, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  ':'\n";}]])

b4_case(283, [b4_syncline(1004, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript: test ':'\n";}]])

b4_case(284, [b4_syncline(1005, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  test ':' test\n";}]])

b4_case(285, [b4_syncline(1006, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  test ':' sliceop\n";}]])

b4_case(286, [b4_syncline(1007, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  test ':' test sliceop\n";}]])

b4_case(287, [b4_syncline(1008, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  ':' test\n";}]])

b4_case(288, [b4_syncline(1009, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  ':' sliceop\n";}]])

b4_case(289, [b4_syncline(1010, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"subscript:  ':' test sliceop\n";}]])

b4_case(290, [b4_syncline(1013, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"sliceop: ':'\n";}]])

b4_case(291, [b4_syncline(1014, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"sliceop: ':' test\n";}]])

b4_case(292, [b4_syncline(1017, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_expr_star_seq : 	',' expr \n";}]])

b4_case(293, [b4_syncline(1018, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_expr_star_seq : 	',' star_expr \n";}]])

b4_case(294, [b4_syncline(1019, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_expr_star_seq : 	comma_expr_star_seq ',' expr \n";}]])

b4_case(295, [b4_syncline(1020, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_expr_star_seq : 	comma_expr_star_seq ',' star_expr \n";}]])

b4_case(296, [b4_syncline(1023, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	expr \n";}]])

b4_case(297, [b4_syncline(1024, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	expr comma_expr_star_seq \n";}]])

b4_case(298, [b4_syncline(1025, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	star_expr \n";}]])

b4_case(299, [b4_syncline(1026, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	star_expr comma_expr_star_seq \n";}]])

b4_case(300, [b4_syncline(1027, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	expr ',' \n";}]])

b4_case(301, [b4_syncline(1028, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	expr comma_expr_star_seq ',' \n";}]])

b4_case(302, [b4_syncline(1029, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	star_expr ',' \n";}]])

b4_case(303, [b4_syncline(1030, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"exprlist: 	star_expr  comma_expr_star_seq ',' \n";}]])

b4_case(304, [b4_syncline(1033, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test: ',' test \n";}]])

b4_case(305, [b4_syncline(1034, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"',' test comma_test \n";}]])

b4_case(306, [b4_syncline(1037, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist:	test \n";}]])

b4_case(307, [b4_syncline(1038, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist:	test comma_test \n";}]])

b4_case(308, [b4_syncline(1039, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist:	 test ','\n";}]])

b4_case(309, [b4_syncline(1040, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"testlist:	 test comma_test ','\n";}]])

b4_case(310, [b4_syncline(1043, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_colon_test_seq:  ',' test ':' test \n";}]])

b4_case(311, [b4_syncline(1044, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_colon_test_seq: comma_test_colon_test_seq ',' test ':' test\n";}]])

b4_case(312, [b4_syncline(1046, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_seq: ',' test \n";}]])

b4_case(313, [b4_syncline(1047, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_test_seq: comma_test_seq ',' test \n";}]])

b4_case(314, [b4_syncline(1050, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ':' test comp_for \n";}]])

b4_case(315, [b4_syncline(1051, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ':' test \n";}]])

b4_case(316, [b4_syncline(1052, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ':' test ',' \n";}]])

b4_case(317, [b4_syncline(1053, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ':' test comma_test_colon_test_seq \n";}]])

b4_case(318, [b4_syncline(1054, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ':' test comma_test_colon_test_seq ','\n";}]])

b4_case(319, [b4_syncline(1055, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test comp_for\n";}]])

b4_case(320, [b4_syncline(1056, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test\n";}]])

b4_case(321, [b4_syncline(1057, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ','\n";}]])

b4_case(322, [b4_syncline(1058, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test ','\n";}]])

b4_case(323, [b4_syncline(1059, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"dictorsetmaker: test comma_test_seq ','\n";}]])

b4_case(324, [b4_syncline(1061, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
								Streams::verbose() <<"classdef: classheader suite\n";
								]b4_lhs_value([[type]])[=p->finishTypeDeclaration(t);
								]b4_lhs_value([[tn]])[=ast->createClassNode(]b4_rhs_value(2, 1, [[type]])[,]b4_rhs_value(2, 2, [[tn]])[,NULL);
							}]])

b4_case(325, [b4_syncline(1067, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
								Streams::verbose() << "class_h: CLASS ID \n";
								colonStack.push(new ColonStack(]b4_rhs_value(3, 1, [[r.lineNum]])[,]b4_rhs_value(3, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(3, 2, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;

								inhertance_list.clear();
					}]])

b4_case(326, [b4_syncline(1075, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									Streams::verbose() << "class_h: access_modef CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(4, 1, [[r.lineNum]])[,]b4_rhs_value(4, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(4, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(327, [b4_syncline(1082, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									Streams::verbose() << "class_h: STATIC CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(4, 1, [[r.lineNum]])[,]b4_rhs_value(4, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(4, 3, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(328, [b4_syncline(1089, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
									Streams::verbose() << "class_h: FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(4, 1, [[r.lineNum]])[,]b4_rhs_value(4, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(4, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(329, [b4_syncline(1096, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(330, [b4_syncline(1103, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
												Streams::verbose() << "class_h: STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(331, [b4_syncline(1110, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: FINAL access_modef CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(332, [b4_syncline(1117, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: STATIC access_modef CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(333, [b4_syncline(1124, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(334, [b4_syncline(1131, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(335, [b4_syncline(1138, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: access_modef STATIC CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(336, [b4_syncline(1145, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: access_modef FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 2, [[r.colNum]])[+1));
							]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 4, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(337, [b4_syncline(1152, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
							]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(338, [b4_syncline(1159, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
							]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(339, [b4_syncline(1166, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
							]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(340, [b4_syncline(1173, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 2, [[r.colNum]])[+1));
							]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
					}]])

b4_case(341, [b4_syncline(1180, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
										Streams::verbose() << "class_h: CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(5, 1, [[r.lineNum]])[,]b4_rhs_value(5, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(5, 2, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
									t=]b4_lhs_value([[type]])[;
									inhertance_list.clear();
									temp_id="";
									acc_mod="";
								}]])

b4_case(342, [b4_syncline(1188, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: access_modef CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(343, [b4_syncline(1195, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: STATIC CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 3, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(344, [b4_syncline(1202, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											Streams::verbose() << "class_h: FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(345, [b4_syncline(1209, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(346, [b4_syncline(1216, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(347, [b4_syncline(1223, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: STATIC access_modef CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(348, [b4_syncline(1230, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: FINAL access_modef CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(349, [b4_syncline(1237, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(350, [b4_syncline(1244, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(351, [b4_syncline(1251, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef STATIC CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
								]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(352, [b4_syncline(1258, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													Streams::verbose() << "class_h: access_modef FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 4, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(353, [b4_syncline(1265, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(354, [b4_syncline(1272, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(355, [b4_syncline(1279, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(356, [b4_syncline(1286, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: access_modef STATIC FINAL CLASS ID OPEN_S CLOSE_S \n"; colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 4, [[r.colNum]])[+1)); 
									]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
								t=]b4_lhs_value([[type]])[;
								inhertance_list.clear();
								acc_mod="";
								}]])

b4_case(357, [b4_syncline(1293, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														Streams::verbose() << "class_h: CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(6, 1, [[r.lineNum]])[,]b4_rhs_value(6, 5, [[r.colNum]])[+1));
												]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(6, 2, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
												acc_mod="";
											}]])

b4_case(358, [b4_syncline(1300, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																Streams::verbose() << "class_h: access_modef CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,0, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
													acc_mod="";
											}]])

b4_case(359, [b4_syncline(1307, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: STATIC CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 3, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
													acc_mod="";
											}]])

b4_case(360, [b4_syncline(1314, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
															Streams::verbose() << "class_h: FINAL CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(7, 1, [[r.lineNum]])[,]b4_rhs_value(7, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(7, 3, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
													acc_mod="";
											}]])

b4_case(361, [b4_syncline(1321, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																	Streams::verbose() << "class_h: STATIC FINAL CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
													acc_mod="";
											}]])

b4_case(362, [b4_syncline(1328, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																	Streams::verbose() << "class_h: STATIC FINAL CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													inhertance_list.clear();
													acc_mod="";
											}]])

b4_case(363, [b4_syncline(1335, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																		Streams::verbose() << "class_h: STATIC access_modef CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 4, [[r.strVal]])[,inhertance_list,acc_mod,1,0, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(364, [b4_syncline(1342, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																	Streams::verbose() << "class_h: FINAL access_modef CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(8, 1, [[r.lineNum]])[,]b4_rhs_value(8, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(8, 4, [[r.strVal]])[,inhertance_list,acc_mod,0,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(365, [b4_syncline(1349, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(366, [b4_syncline(1356, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S unit_list CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(367, [b4_syncline(1363, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"classheader: CLASS NAME '(' arglist ')' ':' \n";}]])

b4_case(368, [b4_syncline(1364, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"classheader: CLASS NAME '(' arglist ')' ':' \n";}]])

b4_case(369, [b4_syncline(1365, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S dotted_as_names CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(370, [b4_syncline(1372, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S dotted_as_names CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(371, [b4_syncline(1379, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S dotted_as_names CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(372, [b4_syncline(1386, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																			Streams::verbose() << "class_h: STATIC FINAL access_modef CLASS ID OPEN_S dotted_as_names CLOSE_S \n";colonStack.push(new ColonStack(]b4_rhs_value(9, 1, [[r.lineNum]])[,]b4_rhs_value(9, 5, [[r.colNum]])[+1));
													]b4_lhs_value([[type]])[=p->createType(]b4_rhs_value(9, 5, [[r.strVal]])[,inhertance_list,acc_mod,1,1, yylval.r.lineNum, yylval.r.colNum,false);
													t=]b4_lhs_value([[type]])[;
													acc_mod="";
													inhertance_list.clear();
											}]])

b4_case(373, [b4_syncline(1396, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arg_comma_seq : argument ','\n";}]])

b4_case(374, [b4_syncline(1397, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arg_comma_seq : argument ',' arg_comma_seq\n";}]])

b4_case(375, [b4_syncline(1400, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_arg_seq:	',' argument\n";}]])

b4_case(376, [b4_syncline(1401, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_arg_seq:	comma_arg_seq ',' argument\n";}]])

b4_case(377, [b4_syncline(1404, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: argument\n";}]])

b4_case(378, [b4_syncline(1405, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: default_arg\n";}]])

b4_case(379, [b4_syncline(1407, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: argument ','\n";}]])

b4_case(380, [b4_syncline(1409, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {    
						std::string tempstr(]b4_rhs_value(2, 2, [[r.strVal]])[);
						std::string erro("*" + tempstr);
						char *cstr = new char@{erro.length() + 1@};
						strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
						Streams::verbose() <<"arglist: '*' test\n";
				   }]])

b4_case(381, [b4_syncline(1417, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
										std::string tempstr(]b4_rhs_value(5, 2, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
										std::string tempstr1(]b4_rhs_value(5, 5, [[r.strVal]])[);
										std::string erro1("**" + tempstr1);
										char *cstr1 = new char@{erro1.length() + 1@};
										strcpy(cstr1, erro1.c_str()); parameters.push_back(cstr1);
										
										Streams::verbose() <<"arglist: '*' test ',' STAR_2 test\n";
									}]])

b4_case(382, [b4_syncline(1430, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
		 					   		    std::string tempstr(]b4_rhs_value(3, 2, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
									    
										Streams::verbose() <<"arglist: '*' test comma_arg_seq\n";
								 }]])

b4_case(383, [b4_syncline(1439, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
										std::string tempstr(]b4_rhs_value(3, 2, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);

											Streams::verbose() <<"arglist: '*' test comma_arg_seq\n";
										 }]])

b4_case(384, [b4_syncline(1448, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
		 										std::string tempstr(]b4_rhs_value(4, 2, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
															Streams::verbose() <<"arglist: '*' test comma_arg_seq\n";
													   }]])

b4_case(385, [b4_syncline(1456, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
													std::string tempstr(]b4_rhs_value(6, 2, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
										
										std::string tempstr1(]b4_rhs_value(6, 6, [[r.strVal]])[);
										std::string erro1("**" + tempstr1);
										char *cstr1 = new char@{erro1.length() + 1@};
													strcpy(cstr1, erro1.c_str()); parameters.push_back(cstr1);Streams::verbose() <<"arglist: '*' test comma_arg_seq ',' STAR_2 test\n";
												  }]])

b4_case(386, [b4_syncline(1468, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
						std::string tempstr(]b4_rhs_value(2, 2, [[r.strVal]])[);
										std::string erro("**" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
						strcpy(cstr, erro.c_str()); parameters.push_back(cstr);Streams::verbose() <<"arglist: STAR_2 test\n";
					  }]])

b4_case(387, [b4_syncline(1475, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: arg_comma_seq argument\n";}]])

b4_case(388, [b4_syncline(1476, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: arg_comma_seq default_arg\n";}]])

b4_case(389, [b4_syncline(1477, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: arg_comma_seq default_arg_comma_seq default_arg\n";}]])

b4_case(390, [b4_syncline(1478, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"arglist: arg_comma_seq argument ','\n";}]])

b4_case(391, [b4_syncline(1480, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {		
									std::string tempstr(]b4_rhs_value(3, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
									Streams::verbose() <<"arglist: arg_comma_seq '*' test\n";
								  }]])

b4_case(392, [b4_syncline(1488, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
											std::string tempstr(]b4_rhs_value(6, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
										
										std::string tempstr1(]b4_rhs_value(6, 6, [[r.strVal]])[);
										std::string erro1("**" + tempstr1);
										char *cstr1 = new char@{erro1.length() + 1@};
										strcpy(cstr1, erro1.c_str()); parameters.push_back(cstr1);
													Streams::verbose() <<"arglist: arg_comma_seq '*' test ',' STAR_2 test\n";
												 }]])

b4_case(393, [b4_syncline(1501, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
												std::string tempstr(]b4_rhs_value(4, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
												Streams::verbose() <<"arglist: arg_comma_seq '*' test comma_arg_seq\n";
											   }]])

b4_case(394, [b4_syncline(1509, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
														std::string tempstr(]b4_rhs_value(4, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
														Streams::verbose() <<"arglist: arg_comma_seq '*' test comma_default_arg_seq\n";
													   }]])

b4_case(395, [b4_syncline(1517, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																		std::string tempstr(]b4_rhs_value(5, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
																		Streams::verbose() <<"arglist: arg_comma_seq '*' test comma_arg_seq comma_default_arg_seq\n";
																	 }]])

b4_case(396, [b4_syncline(1525, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {
																std::string tempstr(]b4_rhs_value(7, 3, [[r.strVal]])[);
										std::string erro("*" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
										
										std::string tempstr1(]b4_rhs_value(7, 7, [[r.strVal]])[);
										std::string erro1("**" + tempstr1);
										char *cstr1 = new char@{erro1.length() + 1@};
										strcpy(cstr1, erro1.c_str()); parameters.push_back(cstr1);
																Streams::verbose() <<"arglist: arg_comma_seq '*' test comma_arg_seq ',' STAR_2 test\n";
															   }]])

b4_case(397, [b4_syncline(1538, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {	std::string tempstr(]b4_rhs_value(3, 3, [[r.strVal]])[);
										std::string erro("**" + tempstr);
										char *cstr = new char@{erro.length() + 1@};
										strcpy(cstr, erro.c_str()); parameters.push_back(cstr);
										Streams::verbose() <<"arglist: arg_comma_seq STAR_2 test\n";
								    }]])

b4_case(398, [b4_syncline(1548, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_default_arg_seq: ',' default_arg\n";}]])

b4_case(399, [b4_syncline(1549, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comma_default_arg_seq: comma_default_arg_seq ',' default_arg\n";}]])

b4_case(400, [b4_syncline(1552, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"default_arg_comma_seq: default_arg ','\n";}]])

b4_case(401, [b4_syncline(1553, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"default_arg_comma_seq: default_arg_comma_seq default_arg ','\n";}]])

b4_case(402, [b4_syncline(1556, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {parameters.push_back(]b4_rhs_value(3, 1, [[r.strVal]])[);Streams::verbose() <<"default_arg: test '=' test\n";}]])

b4_case(403, [b4_syncline(1558, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {parameters.push_back(]b4_rhs_value(1, 1, [[r.strVal]])[); Streams::verbose() <<"argument: 	test\n";}]])

b4_case(404, [b4_syncline(1559, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {parameters.push_back(]b4_rhs_value(2, 1, [[r.strVal]])[);Streams::verbose() <<"argument: 	test comp_for\n";}]])

b4_case(405, [b4_syncline(1563, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_iter:  comp_for\n";}]])

b4_case(406, [b4_syncline(1564, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_iter:  comp_if\n";}]])

b4_case(407, [b4_syncline(1567, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_for: 	FOR exprlist IN or_test\n";}]])

b4_case(408, [b4_syncline(1568, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_for: FOR exprlist IN or_test comp_iter\n";}]])

b4_case(409, [b4_syncline(1571, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_if: IF or_test\n";}]])

b4_case(410, [b4_syncline(1572, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])
[    {Streams::verbose() <<"comp_if: IF or_test comp_iter\n";}]])

])

m4_define([b4_mergers], 
[[]])

m4_define([b4_tokens], 
[[[[ENDMARKER]], 258],
[[[IMPORT]], 259],
[[[CLASS]], 260],
[[[END]], 261],
[[[PRIMARY]], 262],
[[[OR]], 263],
[[[AND]], 264],
[[[NOT]], 265],
[[[NOT_EQUAL]], 266],
[[[FINAL]], 267],
[[[STATIC]], 268],
[[[SELF]], 269],
[[[DEF]], 270],
[[[ELSE]], 271],
[[[IF]], 272],
[[[ELIF]], 273],
[[[WHILE]], 274],
[[[FOR]], 275],
[[[IN]], 276],
[[[TRY]], 277],
[[[FINALLY]], 278],
[[[ARROW]], 279],
[[[NONLOCAL]], 280],
[[[PLUS_EQUAL]], 281],
[[[MINUS_EQUAL]], 282],
[[[DIV_EQUAL]], 283],
[[[MOD_EQUAL]], 284],
[[[AND_EQUAL]], 285],
[[[OR_EQUAL]], 286],
[[[SHAPOO_EQUAL]], 287],
[[[LESS_THAN_2_EQUAL]], 288],
[[[MORE_THAN_2_EQUAL]], 289],
[[[STAR_2_EQUAL]], 290],
[[[DIV_2_EQUAL]], 291],
[[[MORE_LESS]], 292],
[[[FALSE]], 293],
[[[TRUE]], 294],
[[[STAR_2]], 295],
[[[NUMBER_INT]], 296],
[[[NUMBER_LONG]], 297],
[[[NUMBER_FLOAT]], 298],
[[[NAME]], 299],
[[[DOT_3]], 300],
[[[EXPECT]], 301],
[[[WITH]], 302],
[[[AS]], 303],
[[[ASSERT]], 304],
[[[EQUAL]], 305],
[[[DEL]], 306],
[[[RETURN]], 307],
[[[PRINT]], 308],
[[[GLOBAL]], 309],
[[[STAR_EQUAL]], 310],
[[[LESS_THAN_2]], 311],
[[[RAISE]], 312],
[[[PRIVATE]], 313],
[[[PUBLIC]], 314],
[[[PROTECTED]], 315],
[[[YIELD]], 316],
[[[MORE_THAN_2]], 317],
[[[STRING]], 318],
[[[NONE]], 319],
[[[IS]], 320],
[[[DIV_2]], 321],
[[[LESS_OR_EQUAL]], 322],
[[[MORE_OR_EQUAL]], 323],
[[[EXCEPT]], 324],
[[[PASS]], 325],
[[[CHAR_VALUE]], 326],
[[[BREAK]], 327],
[[[CONTINUE]], 328],
[[[stmt_14]], 329],
[[[stmt_13]], 330],
[[[stmt_12]], 331],
[[[stmt_11]], 332],
[[[stmt_10]], 333],
[[[stmt_9]], 334],
[[[stmt_8]], 335],
[[[stmt_7]], 336],
[[[stmt_6]], 337],
[[[stmt_5]], 338],
[[[stmt_4]], 339],
[[[stmt_3]], 340],
[[[stmt_2]], 341],
[[[stmt_1]], 342]])

m4_define([b4_symbol_destructors], 
[])

m4_define([b4_symbol_printers], 
[])

m4_define([b4_translate],
[[     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    97,   105,     2,
      89,   100,    95,    93,    88,    94,   102,    96,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    99,    98,
      91,   101,    92,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    90,     2,   107,   104,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   108,   103,   109,   106,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87]])


m4_define([b4_use_push_for_pull_flag],
[[0]])


m4_define([b4_pact_ninf],
[[-526]])


m4_define([b4_conflict_list_heads],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_toknum_max],
[[342]])


m4_define([b4_rhs],
[[   111,     0,    -1,   112,     3,    -1,   134,    98,   113,    -1,
     113,    -1,   198,   113,    -1,   198,    -1,   115,   156,    -1,
      15,    44,   116,    24,   157,    99,    -1,    15,   126,    44,
     116,    24,   157,    99,    -1,    15,    44,   116,    99,    -1,
      15,   126,    44,   116,    99,    -1,    15,    13,    44,   116,
      24,   157,    99,    -1,    15,    12,    44,   116,    24,   157,
      99,    -1,    15,    13,    44,   116,    99,    -1,    15,    12,
      44,   116,    99,    -1,    15,    13,    12,    44,   116,    24,
     157,    99,    -1,    15,    12,    13,    44,   116,    24,   157,
      99,    -1,    15,    13,    12,    44,   116,    99,    -1,    15,
      12,    13,    44,   116,    99,    -1,    15,    12,   126,    44,
     116,    24,   157,    99,    -1,    15,    13,   126,    44,   116,
      24,   157,    99,    -1,    15,    13,   126,    44,   116,    99,
      -1,    15,    12,   126,    44,   116,    99,    -1,    15,    13,
      12,   126,    44,   116,    24,   157,    99,    -1,    15,    12,
      13,   126,    44,   116,    24,   157,    99,    -1,    15,    13,
      12,   126,    44,   116,    99,    -1,    15,    12,    13,   126,
      44,   116,    99,    -1,    15,   126,    13,    44,   116,    24,
     157,    99,    -1,    15,   126,    12,    44,   116,    24,   157,
      99,    -1,    15,   126,    13,    44,   116,    99,    -1,    15,
     126,    12,    44,   116,    99,    -1,    15,   126,    13,    12,
      44,   116,    24,   157,    99,    -1,    15,   126,    12,    13,
      44,   116,    24,   157,    99,    -1,    15,   126,    13,    12,
      44,   116,    99,    -1,    15,   126,    12,    13,    44,   116,
      99,    -1,    15,    13,   126,    12,    44,   116,    24,   157,
      99,    -1,    15,    12,   126,    13,    44,   116,    24,   157,
      99,    -1,    15,    13,   126,    12,    44,   116,    99,    -1,
      15,    12,   126,    13,    44,   116,    99,    -1,    89,   202,
     100,    -1,    89,   100,    -1,   118,    -1,   144,    -1,   119,
      98,    -1,   120,    -1,   128,    -1,   129,    -1,   130,    -1,
     134,    -1,   142,    -1,   143,    -1,   127,    -1,   122,   125,
     194,    -1,   122,    -1,   122,   121,    -1,   101,   122,   121,
      -1,   101,   122,    -1,   124,    -1,   124,    88,    -1,    88,
      -1,   157,   124,    -1,   157,    -1,   166,   124,    88,    -1,
     166,    88,    -1,    88,   157,    -1,    88,   166,    -1,   124,
     123,    -1,   123,    -1,    26,    -1,    27,    -1,    55,    -1,
      28,    -1,    29,    -1,    30,    -1,    31,    -1,    32,    -1,
      33,    -1,    34,    -1,    35,    -1,    36,    -1,    58,    -1,
      59,    -1,    60,    -1,    53,   192,    -1,    51,   192,    -1,
      70,    -1,   131,    -1,   132,    -1,   133,    -1,    72,    -1,
      73,    -1,    52,   194,    -1,    52,    -1,   135,    -1,     4,
     137,    -1,    88,   138,    -1,   136,    88,   138,    -1,   138,
      -1,   138,   136,    -1,   139,    -1,   139,    48,    44,    -1,
      44,    -1,    44,   140,    -1,   102,    44,    -1,   140,   102,
      44,    -1,    88,    44,    -1,   141,    88,    44,    -1,    54,
      44,    -1,    54,    44,   141,    -1,    25,    44,    -1,    25,
      44,   141,    -1,   146,    -1,   147,    -1,   148,    -1,   149,
      -1,   152,    -1,   114,    -1,    15,   198,    -1,    18,   157,
      99,   156,    -1,   145,    18,   157,    99,   156,    -1,    17,
     157,    99,   156,    -1,    17,   157,    99,   156,   145,    -1,
      17,   157,    99,   156,    16,    99,   156,    -1,    17,   157,
      99,   156,   145,    16,    99,   156,    -1,    19,   157,    99,
     156,    -1,    19,   157,    99,   156,    16,    99,   156,    -1,
      20,   192,    21,   194,    99,   156,    -1,    20,   192,    21,
     194,    99,   156,    16,    99,   156,    -1,    22,    99,   156,
     150,    -1,    22,    99,   156,   150,    16,    99,   156,    -1,
      22,    99,   156,   150,    23,    99,   156,    -1,    22,    99,
     156,    23,    99,   156,    -1,   154,    99,   156,    -1,   150,
     154,    99,   156,    -1,    88,   153,    -1,   151,    88,   153,
      -1,    47,   153,    99,   156,    -1,    47,   153,   151,    99,
     156,    -1,   157,    -1,   157,    48,   168,    -1,    69,    -1,
      69,   157,    -1,    69,   157,    48,    44,    -1,   117,    -1,
     117,   155,    -1,   155,     6,    -1,     6,    -1,   159,    -1,
     159,    17,   159,    16,   157,    -1,     8,   161,    -1,   158,
       8,   161,    -1,   161,    -1,   161,   158,    -1,     9,   162,
      -1,   160,     9,   162,    -1,   162,    -1,   162,   160,    -1,
      10,   162,    -1,   164,    -1,   165,   168,    -1,   163,   165,
     168,    -1,   168,    -1,   168,   163,    -1,    91,    -1,    92,
      -1,    50,    -1,    68,    -1,    67,    -1,    37,    -1,    11,
      -1,    21,    -1,    10,    21,    -1,    65,    -1,    65,    10,
      -1,    95,   168,    -1,   103,   170,    -1,   167,   103,   170,
      -1,   170,    -1,   170,   167,    -1,   104,   172,    -1,   169,
     104,   172,    -1,   172,    -1,   172,   169,    -1,   105,   174,
      -1,   171,   105,   174,    -1,   174,    -1,   174,   171,    -1,
      56,   176,    -1,    62,   176,    -1,   173,    56,   176,    -1,
     173,    62,   176,    -1,   176,    -1,   176,   173,    -1,    93,
     178,    -1,    94,   178,    -1,   175,    93,   178,    -1,   175,
      94,   178,    -1,   178,    -1,   178,   175,    -1,    95,   179,
      -1,    96,   179,    -1,    97,   179,    -1,    66,   179,    -1,
     177,    95,   179,    -1,   177,    96,   179,    -1,   177,    97,
     179,    -1,   177,    66,   179,    -1,   179,    -1,   179,   177,
      -1,    93,   179,    -1,    94,   179,    -1,   106,   179,    -1,
     181,    -1,   186,    -1,   180,   186,    -1,   183,    -1,   183,
     180,    -1,   183,   180,    40,   179,    -1,   183,    40,   179,
      -1,    63,    -1,   182,    63,    -1,    89,   100,    -1,    89,
     185,   100,    -1,    90,   107,    -1,   108,   109,    -1,    90,
     185,   107,    -1,   108,   197,   109,    -1,    44,    -1,    44,
      89,   100,    -1,    44,    89,   202,   100,    -1,    44,    90,
     188,   107,    -1,    15,    44,    -1,    15,   126,    44,    -1,
      15,    13,    44,    -1,    15,    12,    44,    -1,    15,    13,
      12,    44,    -1,    15,    12,    13,    44,    -1,    15,    13,
     126,    44,    -1,    15,    12,   126,    44,    -1,    15,    13,
      12,   126,    44,    -1,    15,    12,    13,   126,    44,    -1,
      15,   126,    13,    44,    -1,    15,   126,    12,    44,    -1,
      15,   126,    13,    12,    44,    -1,    15,   126,    12,    13,
      44,    -1,    15,    13,   126,    12,    44,    -1,    15,    12,
     126,    13,    44,    -1,    41,    -1,    43,    -1,    42,    -1,
      71,    -1,   182,    -1,    45,    -1,    64,    -1,    39,    -1,
      38,    -1,    88,   157,    -1,    88,   166,    -1,   184,    88,
     157,    -1,   184,    88,   166,    -1,   157,   208,    -1,   157,
      -1,   157,   184,    -1,   157,    88,    -1,   157,   184,    88,
      -1,   166,   208,    -1,   166,    -1,   166,   184,    -1,   166,
      88,    -1,   166,   184,    88,    -1,   102,    44,    -1,   102,
      44,    89,   100,    -1,   102,    44,    89,   202,   100,    -1,
     102,    44,    90,   188,   107,    -1,    88,   189,    -1,   187,
      88,   189,    -1,   189,    -1,   189,   187,    -1,   189,    88,
      -1,   189,   187,    88,    -1,   157,    -1,    99,    -1,   157,
      99,    -1,   157,    99,   157,    -1,   157,    99,   190,    -1,
     157,    99,   157,   190,    -1,    99,   157,    -1,    99,   190,
      -1,    99,   157,   190,    -1,    99,    -1,    99,   157,    -1,
      88,   168,    -1,    88,   166,    -1,   191,    88,   168,    -1,
     191,    88,   166,    -1,   168,    -1,   168,   191,    -1,   166,
      -1,   166,   191,    -1,   168,    88,    -1,   168,   191,    88,
      -1,   166,    88,    -1,   166,   191,    88,    -1,    88,   157,
      -1,    88,   157,   193,    -1,   157,    -1,   157,   193,    -1,
     157,    88,    -1,   157,   193,    88,    -1,    88,   157,    99,
     157,    -1,   195,    88,   157,    99,   157,    -1,    88,   157,
      -1,   196,    88,   157,    -1,   157,    99,   157,   208,    -1,
     157,    99,   157,    -1,   157,    99,   157,    88,    -1,   157,
      99,   157,   195,    -1,   157,    99,   157,   195,    88,    -1,
     157,   208,    -1,   157,    -1,   157,    88,    -1,   157,   196,
      -1,   157,   196,    88,    -1,   199,   156,    -1,     5,    44,
      99,    -1,   126,     5,    44,    99,    -1,    13,     5,    44,
      99,    -1,    12,     5,    44,    99,    -1,    13,    12,     5,
      44,    99,    -1,    12,    13,     5,    44,    99,    -1,    12,
     126,     5,    44,    99,    -1,    13,   126,     5,    44,    99,
      -1,    13,    12,   126,     5,    44,    99,    -1,    12,    13,
     126,     5,    44,    99,    -1,   126,    13,     5,    44,    99,
      -1,   126,    12,     5,    44,    99,    -1,   126,    13,    12,
       5,    44,    99,    -1,   126,    12,    13,     5,    44,    99,
      -1,    13,   126,    12,     5,    44,    99,    -1,    12,   126,
      13,     5,    44,    99,    -1,     5,    44,    89,   100,    99,
      -1,   126,     5,    44,    89,   100,    99,    -1,    13,     5,
      44,    89,   100,    99,    -1,    12,     5,    44,    89,   100,
      99,    -1,    13,    12,     5,    44,    89,   100,    99,    -1,
      12,    13,     5,    44,    89,   100,    99,    -1,    13,   126,
       5,    44,    89,   100,    99,    -1,    12,   126,     5,    44,
      89,   100,    99,    -1,    13,    12,   126,     5,    44,    89,
     100,    99,    -1,    12,    13,   126,     5,    44,    89,   100,
      99,    -1,   126,    13,     5,    44,    89,   100,    99,    -1,
     126,    12,     5,    44,    89,   100,    99,    -1,   126,    13,
      12,     5,    44,    89,   100,    99,    -1,   126,    12,    13,
       5,    44,    89,   100,    99,    -1,    13,   126,    12,     5,
      44,    89,   100,    99,    -1,    12,   126,    13,     5,    44,
      89,   100,    99,    -1,     5,    44,    89,   137,   100,    99,
      -1,   126,     5,    44,    89,   137,   100,    99,    -1,    13,
       5,    44,    89,   137,   100,    99,    -1,    12,     5,    44,
      89,   137,   100,    99,    -1,    13,    12,     5,    44,    89,
     137,   100,    99,    -1,    12,    13,     5,    44,    89,   137,
     100,    99,    -1,    13,   126,     5,    44,    89,   137,   100,
      99,    -1,    12,   126,     5,    44,    89,   137,   100,    99,
      -1,    13,    12,   126,     5,    44,    89,   137,   100,    99,
      -1,    12,    13,   126,     5,    44,    89,   137,   100,    99,
      -1,   126,    13,     5,    44,    89,   137,   100,    99,    -1,
     126,    12,     5,    44,    89,   137,   100,    99,    -1,   126,
      13,    12,     5,    44,    89,   137,   100,    99,    -1,   126,
      12,    13,     5,    44,    89,   137,   100,    99,    -1,    13,
     126,    12,     5,    44,    89,   137,   100,    99,    -1,    12,
     126,    13,     5,    44,    89,   137,   100,    99,    -1,   206,
      88,    -1,   200,   206,    88,    -1,    88,   206,    -1,   201,
      88,   206,    -1,   206,    -1,   205,    -1,   206,    88,    -1,
      95,   157,    -1,    95,   157,    88,    40,   157,    -1,    95,
     157,   201,    -1,    95,   157,   203,    -1,    95,   157,   201,
     203,    -1,    95,   157,   201,    88,    40,   157,    -1,    40,
     157,    -1,   200,   206,    -1,   200,   205,    -1,   200,   204,
     205,    -1,   200,   206,    88,    -1,   200,    95,   157,    -1,
     200,    95,   157,    88,    40,   157,    -1,   200,    95,   157,
     201,    -1,   200,    95,   157,   203,    -1,   200,    95,   157,
     201,   203,    -1,   200,    95,   157,   201,    88,    40,   157,
      -1,   200,    40,   157,    -1,    88,   205,    -1,   203,    88,
     205,    -1,   205,    88,    -1,   204,   205,    88,    -1,   157,
     101,   157,    -1,   157,    -1,   157,   208,    -1,   208,    -1,
     209,    -1,    20,   192,    21,   159,    -1,    20,   192,    21,
     159,   207,    -1,    17,   159,    -1,    17,   159,   207,    -1]])


m4_define([b4_last],
[[1486]])


m4_define([b4_stos_min],
[[0]])


m4_define([b4_tag_seen_flag],
[[1]])


m4_define([b4_token_table_flag],
[[0]])


m4_define([b4_parser_file_name],
[[yacc.cpp]])


m4_define([b4_table_min],
[[-391]])


m4_define([b4_table],
[[   141,   142,   321,   434,   292,   569,   308,   311,   165,   166,
     405,   168,   151,   444,   153,   135,   317,    23,    26,   152,
     566,   155,   568,   157,   160,   160,   331,   322,   172,   238,
     170,   656,   143,   320,   406,   660,   120,   305,   305,   125,
     191,   333,   305,   143,   335,   143,   144,   341,   342,   523,
     139,   391,   392,   158,   161,   161,    16,   144,   226,   144,
     337,   338,   529,   242,   539,   618,   298,   623,   625,   446,
     630,   515,   167,    16,   232,   420,   396,   299,   121,   401,
     447,   725,   129,   393,   305,   412,   122,   227,   228,   229,
     130,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   355,   516,    16,   283,   314,   634,   305,   407,
     306,   289,   295,   305,   637,   519,   688,   315,   428,   691,
     186,   421,   695,   698,   524,   701,   419,   292,   704,   241,
     202,   203,   220,   663,   724,   429,   233,   530,   221,   540,
     619,   204,   624,   626,   464,   631,   433,   520,   264,   662,
     267,   270,   153,   157,   461,   358,   157,   205,   191,   465,
     361,   571,   466,   157,   233,   191,   187,   469,   470,    16,
     206,   345,   346,   347,   348,    16,   309,   353,   324,   467,
     468,   577,   635,   158,    16,   207,   158,   208,   209,   638,
     362,   689,    16,   158,   692,    16,   370,   696,   699,    16,
     702,   511,   378,   705,   521,   246,    16,    16,   526,   527,
      16,   210,   211,   532,   583,    29,   517,   248,    20,   536,
     330,   538,   273,   274,    16,   369,    27,    16,    16,   111,
      16,   377,   512,   116,   289,   413,   414,    16,    28,   550,
     481,    33,   252,   117,   522,   153,   551,   518,   485,   426,
     427,   491,   121,   289,   275,   495,   525,   438,   445,   133,
     397,   151,   501,   505,   339,   449,   588,    32,   654,   452,
     340,   415,   452,   415,   451,   387,   390,   456,   457,   395,
     592,   528,   400,   597,   601,   416,   606,   416,   562,   157,
     113,   398,   421,   610,   471,   472,   473,   474,   143,   453,
     477,    21,   453,   579,   115,   462,     1,     2,   448,   265,
     482,   119,   144,   486,     3,     4,   126,   194,   492,   158,
       2,   496,   201,   127,   254,    21,   502,   136,   137,   506,
     118,   292,   620,    22,   123,   622,   463,   126,   627,   243,
     266,   629,   249,     2,   402,   633,   174,   636,   258,   244,
       3,     4,   250,   260,     5,     6,     7,   255,   128,   138,
       5,     6,     7,   531,     5,     6,     7,   256,   720,   534,
     146,   654,   363,     5,     6,     7,   403,   129,     5,     6,
       7,   664,   364,   131,   549,   408,   147,   535,   119,   156,
     132,   558,   537,   559,   560,   561,     5,     6,     7,   510,
     565,   190,   514,   567,   192,   295,   572,   131,   195,   151,
     545,   545,   148,   149,   410,    24,   409,   575,   575,    24,
     196,   580,    25,   581,   546,   546,   268,   394,   124,   193,
     589,   261,   262,   198,   593,   349,   720,   509,   289,   295,
     598,     5,     6,     7,   602,   124,   411,   576,   576,   366,
     607,     5,     6,     7,   611,   541,   200,   542,   269,   367,
     223,   224,    35,   263,   350,   351,   352,   134,     5,     6,
       7,   218,     5,     6,     7,   371,   214,     5,     6,     7,
     216,     5,     6,     7,   399,   372,   621,   642,   388,   643,
      42,    43,   628,    44,    45,    46,    47,    48,     5,     6,
       7,   134,   639,   236,   374,   641,   645,   646,   385,   379,
     231,   382,   651,   721,   375,    54,    55,   239,   289,   380,
     389,   383,   246,    57,    42,    43,   240,    44,    45,    46,
      47,    48,   756,   295,     5,     6,     7,   483,   237,   386,
     665,    61,    62,   245,    29,    63,    64,   484,   513,    54,
      55,    30,    31,     5,     6,     7,   487,    57,    66,   493,
      67,   169,     5,     6,     7,   247,   488,   497,   503,   494,
     343,   344,   507,   475,   476,    61,    62,   498,   504,    63,
      64,   687,   508,   248,   251,   252,   693,   253,   694,   254,
     257,   258,    66,   700,    67,   259,   260,   703,   271,   708,
     706,   276,   277,   712,   278,   301,   711,   715,   716,   717,
     280,   282,   284,   302,   312,   718,   318,   313,   289,   323,
     561,   289,   325,   326,   327,   328,   332,   354,   359,   730,
     334,   357,   336,   360,   435,   417,   365,   368,   373,   376,
     381,   384,   418,   424,   425,   441,   436,   440,   442,   450,
     454,   738,   455,   458,   739,   460,   187,   544,   742,   480,
     554,   743,   478,   555,   745,   479,   489,   747,   749,   750,
     490,   499,   574,   500,   533,   547,   548,   563,   553,   612,
     613,  -379,   753,   428,   437,   754,   289,   585,     1,   564,
      34,   614,   757,   570,    35,  -391,   615,   586,   616,    36,
     587,    37,   591,    38,    39,   590,    40,   594,   595,    41,
     765,   766,   596,   599,   617,   647,   655,   600,   767,   603,
     604,   769,    42,    43,   605,    44,    45,    46,    47,    48,
     608,    49,   609,   632,   657,    50,    51,    52,    53,   640,
     668,   644,   648,   649,   650,   658,   661,    54,    55,  -390,
     666,   713,   714,   667,    56,    57,    58,    59,   669,   670,
     459,   671,   672,   673,    12,   674,   677,   675,   676,   723,
       1,   678,    60,    61,    62,   679,    35,    63,    64,    65,
     680,    36,   681,    37,   682,    38,    39,   683,    40,   684,
      66,    41,    67,   685,   304,   686,   690,   697,   707,   709,
     710,   729,   731,   732,    42,    43,   733,    44,    45,    46,
      47,    48,   734,    49,   735,   736,    35,    50,    51,    52,
      53,   134,   737,   740,   741,   744,   746,   748,   751,    54,
      55,   752,   758,   759,   329,   760,    56,    57,    58,    59,
     761,   762,   763,   764,    42,    43,   286,    44,    45,    46,
      47,    48,   552,   173,    60,    61,    62,    35,   319,    63,
      64,    65,   134,   164,   356,   584,   310,   573,   140,    54,
      55,   768,    66,     0,    67,   281,   659,    57,     0,     0,
       0,     0,     0,     0,     0,    42,    43,   286,    44,    45,
      46,    47,    48,     0,     0,    61,    62,    35,     0,    63,
      64,   287,   134,     0,     0,     0,   288,     0,     0,     0,
      54,    55,    66,     0,    67,     0,     0,     0,    57,     0,
       0,     0,     0,     0,     0,    42,    43,   286,    44,    45,
      46,    47,    48,     0,     0,     0,    61,    62,    35,     0,
      63,    64,   287,   134,     0,     0,     0,   404,     0,     0,
      54,    55,     0,    66,     0,    67,     0,     0,    57,     0,
       0,     0,     0,     0,     0,     0,    42,    43,     0,    44,
      45,    46,    47,    48,     0,     0,    61,    62,    35,     0,
      63,    64,   287,   134,     0,     0,     0,   582,     0,     0,
       0,    54,    55,    66,     0,    67,     0,     0,     0,    57,
       0,     0,     0,     0,     0,     0,    42,    43,     0,    44,
      45,    46,    47,    48,     0,     0,     0,    61,    62,    35,
       0,    63,    64,    65,   134,     0,     0,     0,   159,     0,
       0,    54,    55,     0,    66,     0,    67,     0,     0,    57,
       0,     0,     0,     0,     0,     0,     0,    42,    43,     0,
      44,    45,    46,    47,    48,    35,     0,    61,    62,     0,
     134,    63,    64,    65,     0,     0,     0,     0,     0,     0,
       0,     0,    54,    55,    66,   163,    67,     0,     0,     0,
      57,     0,     0,    42,    43,   430,    44,    45,    46,    47,
      48,    35,     0,     0,     0,     0,   134,    60,    61,    62,
       0,     0,    63,    64,    65,     0,     0,     0,    54,    55,
       0,     0,     0,     0,     0,    66,    57,    67,     0,    42,
      43,     0,    44,    45,    46,    47,    48,    35,     0,     0,
       0,     0,   134,     0,    61,    62,     0,     0,    63,    64,
     431,     0,     0,     0,    54,    55,     0,     0,     0,     0,
       0,    66,    57,    67,     0,    42,    43,     0,    44,    45,
      46,    47,    48,     0,     0,     0,     0,    35,     0,     0,
      61,    62,   134,     0,    63,    64,    65,     0,     0,     0,
      54,    55,     0,     0,     0,     0,     0,    66,    57,    67,
       0,     0,     0,     0,     0,    42,    43,     0,    44,    45,
      46,    47,    48,     0,     0,     0,    61,    62,    35,     0,
      63,    64,     0,   134,     0,     0,   294,     0,     0,     0,
      54,    55,     0,    66,     0,    67,     0,     0,    57,     0,
       0,     0,     0,     0,     0,     0,    42,    43,   652,    44,
      45,    46,    47,    48,    35,     0,    61,    62,     0,   134,
      63,    64,     0,     0,     0,     0,   437,     0,     0,     0,
       0,    54,    55,    66,     0,    67,     0,     0,     0,    57,
       0,     0,    42,    43,   719,    44,    45,    46,    47,    48,
      35,     0,     0,     0,     0,   134,     0,    61,    62,     0,
       0,    63,    64,     0,     0,     0,     0,    54,    55,     0,
       0,     0,     0,     0,    66,    57,    67,     0,    42,    43,
     722,    44,    45,    46,    47,    48,    35,     0,     0,     0,
       0,   134,     0,    61,    62,     0,     0,    63,    64,     0,
       0,     0,     0,    54,    55,     0,     0,     0,     0,     0,
      66,    57,    67,     0,    42,    43,   755,    44,    45,    46,
      47,    48,    35,     0,     0,     0,     0,   134,     0,    61,
      62,     0,     0,    63,    64,     0,     0,     0,     0,    54,
      55,     0,     0,     0,     0,     0,    66,    57,    67,     0,
      42,    43,     0,    44,    45,    46,    47,    48,     0,     0,
       0,     0,     0,   134,     0,    61,    62,     0,     0,    63,
      64,     0,     0,     0,     0,    54,    55,     0,     0,     0,
       0,     0,    66,    57,    67,     0,    42,    43,     0,    44,
      45,    46,    47,    48,     0,     0,     0,     0,     0,     0,
       0,    61,    62,     0,     0,    63,    64,     0,     0,     0,
       0,    54,    55,     0,     0,     0,     0,     0,    66,    57,
      67,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    61,    62,     0,
       0,    63,    64,    65,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    66,     0,    67]])


m4_define([b4_conflicting_rules_max],
[[0]])


m4_define([b4_merger],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0]])


m4_define([b4_glr_flag],
[[1]])


m4_define([b4_percent_define_syncline(lr.keep-unreachable-states)],
[[]])


m4_define([b4_check_max],
[[758]])


m4_define([b4_spec_graph_file],
[[]])


m4_define([b4_rline_min],
[[0]])


m4_define([b4_toknum],
[[     0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,    44,    40,
      91,    60,    62,    43,    45,    42,    47,    37,    59,    58,
      41,    61,    46,   124,    94,    38,   126,    93,   123,   125]])


m4_define([b4_defgoto_max],
[[728]])


m4_define([b4_version],
[[2.7]])


m4_define([b4_translate_min],
[[0]])


m4_define([b4_stype],
[[]b4_syncline(79, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])[

	struct R{
		int intVal;
		float floatVal;
		long longVal;
		char charVal;
		char* strVal;
		int lineNum;
		int colNum;
	}r;
		class YaccSimpleType * yaccSimpleType;
		class Variable * var;
		class Function * function;
		class Type * type;
		class Node * tn;
		class getString * amerstr;
		

]])


m4_define([b4_pkgdatadir],
[[C:\Users\AMER-HY\Source\Repos\compiler-project-Copy-Copy\data]])


m4_define([b4_pgoto_min],
[[-526]])


m4_define([b4_rhs_max],
[[209]])


m4_define([b4_pgoto],
[[  -526,  -526,  -526,   227,  -526,  -526,  -190,  -526,  -526,  -526,
    -526,   441,   671,   -36,   222,  -526,    14,  -526,  -526,  -526,
    -526,  -526,  -526,  -526,   764,  -526,  -526,   -53,   -84,  -526,
    -526,   638,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,
    -526,  -526,  -526,  -285,   430,   783,   -41,   -37,  -526,  -193,
    -526,  -169,   -20,  -526,  -526,   622,    -7,  -526,     7,  -526,
    -188,  -526,  -175,  -526,  -174,  -526,  -160,  -526,  -176,   -55,
    -526,  -526,  -526,  -526,   705,   801,   630,  -526,   389,  -437,
    -418,   731,   -31,   418,  -156,  -526,  -526,  -526,   832,  -526,
    -526,   316,  -261,  -525,  -526,  -144,  -287,   115,  -154,  -526]])


m4_define([b4_pact_max],
[[1378]])


m4_define([b4_debug_flag],
[[0]])


m4_define([b4_yacc_flag],
[[0]])


m4_define([b4_spec_verbose_file],
[[yacc.output]])


m4_define([b4_conflict_list_heads_min],
[[0]])


m4_define([b4_tname],
[["$][end", "error", "$][undefined", "ENDMARKER", "IMPORT", "CLASS", "END",
  "PRIMARY", "OR", "AND", "NOT", "NOT_EQUAL", "FINAL", "STATIC", "SELF",
  "DEF", "ELSE", "IF", "ELIF", "WHILE", "FOR", "IN", "TRY", "FINALLY",
  "ARROW", "NONLOCAL", "PLUS_EQUAL", "MINUS_EQUAL", "DIV_EQUAL",
  "MOD_EQUAL", "AND_EQUAL", "OR_EQUAL", "SHAPOO_EQUAL",
  "LESS_THAN_2_EQUAL", "MORE_THAN_2_EQUAL", "STAR_2_EQUAL", "DIV_2_EQUAL",
  "MORE_LESS", "FALSE", "TRUE", "STAR_2", "NUMBER_INT", "NUMBER_LONG",
  "NUMBER_FLOAT", "NAME", "DOT_3", "EXPECT", "WITH", "AS", "ASSERT",
  "EQUAL", "DEL", "RETURN", "PRINT", "GLOBAL", "STAR_EQUAL", "LESS_THAN_2",
  "RAISE", "PRIVATE", "PUBLIC", "PROTECTED", "YIELD", "MORE_THAN_2",
  "STRING", "NONE", "IS", "DIV_2", "LESS_OR_EQUAL", "MORE_OR_EQUAL",
  "EXCEPT", "PASS", "CHAR_VALUE", "BREAK", "CONTINUE", "stmt_14",
  "stmt_13", "stmt_12", "stmt_11", "stmt_10", "stmt_9", "stmt_8", "stmt_7",
  "stmt_6", "stmt_5", "stmt_4", "stmt_3", "stmt_2", "stmt_1", "','", "'('",
  "'@{'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "';'", "':'",
  "')'", "'='", "'.'", "'|'", "'^'", "'&'", "'~'", "'@}'", "'{'", "'}'",
  "$][accept", "file_input", "program", "temp2", "funcdef", "funcheader",
  "parameters", "stmt", "simple_stmt", "small_stmt", "expr_stmt",
  "right_testlist", "testlist_star_expr", "comma_test_star",
  "comma_test_star_seqJ", "augassign", "access", "print_stmt", "del_stmt",
  "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt",
  "import_stmt", "import_name", "comma_dotted_as_name_seq",
  "dotted_as_names", "dotted_as_name", "dotted_name", "dotted_name_seq",
  "comma_name_seq", "global_stmt", "nonlocal_stmt", "compound_stmt",
  "elif_seq", "if_stmt", "while_stmt", "for_stmt", "try_stmt",
  "try_except_cla_seq", "with_seq", "with_stmt", "with_item",
  "except_clause", "list_stmt", "suite", "test", "or_seq", "or_test",
  "and_seq", "and_test", "not_test", "comp_op_seq", "comparison",
  "comp_op", "star_expr", "or_xor_expr_seq", "expr", "sha_and_expr_seq",
  "xor_expr", "and_shift_expr_seq", "and_expr", "arith_seq", "shift_expr",
  "term_seq", "arith_expr", "factor_seq", "term", "factor", "trailer_seq",
  "power", "str_seq", "atom", "comma_test_star_seq", "testlist_comp",
  "trailer", "comma_subscript_seq", "subscriptlist", "subscript",
  "sliceop", "comma_expr_star_seq", "exprlist", "comma_test", "testlist",
  "comma_test_colon_test_seq", "comma_test_seq", "dictorsetmaker",
  "classdef", "classheader", "arg_comma_seq", "comma_arg_seq", "arglist",
  "comma_default_arg_seq", "default_arg_comma_seq", "default_arg",
  "argument", "comp_iter", "comp_for", "comp_if", ]b4_null[]])


m4_define([b4_defact],
[[     0,     0,     0,     0,     0,    81,    82,    83,     0,     0,
       4,     0,     0,    94,     6,     0,   102,    95,    98,   100,
       0,     0,     0,     0,     0,     0,     0,     1,     2,     0,
       0,     0,     0,     5,   147,     0,     0,     0,     0,     0,
       0,     0,   256,   255,   248,   250,   249,   228,   253,     0,
       0,    93,     0,     0,   220,   254,    86,   251,    90,    91,
      60,     0,     0,     0,     0,     0,     0,     0,   117,     0,
     144,    42,     0,    45,    54,    68,    58,    52,    46,    47,
      48,    87,    88,    89,    49,    50,    51,    43,   112,   113,
     114,   115,   116,     0,   324,    62,   148,   152,   156,   159,
       0,   162,   178,   182,   186,   192,   198,   208,   213,   252,
     216,     0,   103,     0,    99,     0,     0,   325,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     3,     0,   158,     0,     0,   232,     0,
     118,     0,     0,   298,   296,     0,     0,   110,     0,     0,
       0,   139,    85,   306,    92,    84,   108,    65,    66,   222,
     262,   267,     0,   224,     0,   210,   211,   175,   212,   225,
     320,     0,     7,   145,    44,    69,    70,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    71,     0,    55,     0,
      59,    67,   146,     0,    61,     0,     0,   153,     0,   157,
      64,     0,     0,   170,   171,   169,   166,   173,   168,   167,
     164,   165,   163,     0,     0,   179,     0,   183,     0,   187,
       0,     0,   193,     0,     0,   199,     0,     0,     0,     0,
     209,   221,     0,     0,   217,   214,   104,     0,    96,     0,
     101,     0,     0,     0,   328,     0,     0,     0,     0,     0,
     327,     0,     0,     0,     0,     0,   326,     0,     0,     0,
       0,     0,     0,   232,     0,     0,   235,     0,     0,   234,
       0,     0,     0,     0,     0,   233,     0,     0,   302,   299,
     300,   297,     0,     0,     0,   111,     0,     0,   229,   403,
       0,     0,   378,   377,   282,   281,     0,   277,     0,     0,
       0,     0,   308,   307,   109,     0,   264,   263,   261,   269,
     268,   266,   223,   226,   321,     0,   322,   319,   227,    57,
      53,     0,   150,     0,   154,     0,    63,   172,   174,     0,
     160,   176,     0,   180,     0,   184,     0,   188,   189,     0,
       0,   194,   195,     0,     0,   203,   200,   201,   202,     0,
       0,     0,     0,   219,   271,     0,   215,   105,    97,   341,
       0,     0,     0,     0,   330,     0,     0,   331,     0,     0,
       0,     0,   329,     0,     0,   332,     0,     0,     0,     0,
     336,     0,     0,   335,     0,     0,   235,     0,     0,   234,
       0,     0,     0,   233,   237,     0,     0,     0,   239,   236,
       0,     0,     0,   238,    41,     0,     0,    10,     0,   243,
       0,   242,     0,   121,   125,   293,   292,   303,   301,     0,
       0,   141,   129,     0,   106,     0,   386,   380,     0,   404,
       0,     0,     0,   388,   387,   230,   373,   290,   287,   288,
     283,   231,   279,   278,   135,   137,     0,     0,   140,   304,
     309,     0,   257,   258,   265,   270,   312,   315,   323,    56,
       0,   151,   155,   161,   177,   181,   185,   190,   191,   196,
     197,   207,   204,   205,   206,     0,     0,   218,   357,   344,
       0,     0,     0,     0,   334,     0,     0,     0,   340,   343,
       0,     0,     0,     0,   333,     0,     0,     0,   339,   342,
       0,     0,     0,     0,   338,     0,     0,     0,   337,   237,
       0,     0,   239,   236,     0,     0,   238,     0,   243,     0,
     242,     0,   241,     0,    15,   247,     0,     0,   240,     0,
      14,   246,     0,    40,     0,   245,     0,   244,     0,     0,
      11,     0,     0,   122,     0,   295,   294,     0,     0,   142,
       0,     0,     0,     0,   107,     0,   382,   383,   402,   397,
     391,     0,   389,   400,   374,   291,   289,   284,   285,   275,
     280,   136,   138,   305,     0,   259,   260,   316,   317,   314,
     313,   149,   272,     0,     0,   360,   346,     0,     0,     0,
     348,     0,     0,     0,   359,   345,     0,     0,     0,   347,
       0,     0,     0,   358,   352,     0,     0,     0,   351,     0,
       0,     0,   241,   247,   240,   246,   245,   244,     0,    19,
       0,     0,     0,     0,    23,     0,    18,     0,     0,     0,
       0,    22,     8,     0,     0,    31,     0,     0,    30,     0,
       0,     0,     0,     0,     0,   127,   132,     0,     0,     0,
       0,   133,     0,   398,   375,     0,   384,     0,     0,   393,
     394,   401,   286,   276,   407,     0,   318,   273,   274,   362,
     350,     0,   364,   356,     0,   361,   349,     0,   363,   355,
       0,   368,   354,     0,   367,   353,     0,     0,     0,    27,
      13,     0,    39,     0,     0,     0,    26,    12,     0,    38,
       0,     0,    35,     0,     0,    34,     0,     9,   123,     0,
       0,     0,   126,     0,   143,   130,   131,   134,   381,     0,
     376,   399,     0,     0,   395,     0,   408,   405,   406,     0,
       0,   366,   372,   365,   371,   370,   369,    17,     0,     0,
      20,    16,     0,     0,    21,     0,    29,     0,    28,   119,
     124,     0,     0,   385,   392,     0,   409,   310,     0,    25,
      37,    24,    36,    33,    32,   120,   128,   396,   410,   311]])


m4_define([b4_tokens_number],
[[110]])


m4_define([b4_stos_max],
[[209]])


m4_define([b4_merger_min],
[[0]])


m4_define([b4_table_max],
[[769]])


m4_define([b4_spec_name_prefix],
[[]])


m4_define([b4_epilogue],
[[]b4_syncline(1575, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])[

void yyerror(const char *s) 
{
	Program::addError(new SyntaxError(s));
	fprintf(stderr, "Error:%s\n", s);
	//cout<<s;
}

int strlength(char * str)
{
	int i = 0;
	while (str@{i@} != '\0')
		i++;
	return i;
}

int yylex()
{
	return lexer->yylex();

}
void main(void)
{
	string input = "code.txt";
	dir_path="";
	//addFile(input);
	sourceFile=input;
	ifstream inf(input);
	lexer = new yyFlexLexer(&inf);
	Parser* p = new Parser();
	p->parse();
	//Program::printErrors();
	err->printErrQueue();
	system("pause");
}]])


m4_define([b4_table_ninf],
[[-391]])


m4_define([b4_prhs],
[[     0,     0,     3,     6,    10,    12,    15,    17,    20,    27,
      35,    40,    46,    54,    62,    68,    74,    83,    92,    99,
     106,   115,   124,   131,   138,   148,   158,   166,   174,   183,
     192,   199,   206,   216,   226,   234,   242,   252,   262,   270,
     278,   282,   285,   287,   289,   292,   294,   296,   298,   300,
     302,   304,   306,   308,   312,   314,   317,   321,   324,   326,
     329,   331,   334,   336,   340,   343,   346,   349,   352,   354,
     356,   358,   360,   362,   364,   366,   368,   370,   372,   374,
     376,   378,   380,   382,   384,   387,   390,   392,   394,   396,
     398,   400,   402,   405,   407,   409,   412,   415,   419,   421,
     424,   426,   430,   432,   435,   438,   442,   445,   449,   452,
     456,   459,   463,   465,   467,   469,   471,   473,   475,   478,
     483,   489,   494,   500,   508,   517,   522,   530,   537,   547,
     552,   560,   568,   575,   579,   584,   587,   591,   596,   602,
     604,   608,   610,   613,   618,   620,   623,   626,   628,   630,
     636,   639,   643,   645,   648,   651,   655,   657,   660,   663,
     665,   668,   672,   674,   677,   679,   681,   683,   685,   687,
     689,   691,   693,   696,   698,   701,   704,   707,   711,   713,
     716,   719,   723,   725,   728,   731,   735,   737,   740,   743,
     746,   750,   754,   756,   759,   762,   765,   769,   773,   775,
     778,   781,   784,   787,   790,   794,   798,   802,   806,   808,
     811,   814,   817,   820,   822,   824,   827,   829,   832,   837,
     841,   843,   846,   849,   853,   856,   859,   863,   867,   869,
     873,   878,   883,   886,   890,   894,   898,   903,   908,   913,
     918,   924,   930,   935,   940,   946,   952,   958,   964,   966,
     968,   970,   972,   974,   976,   978,   980,   982,   985,   988,
     992,   996,   999,  1001,  1004,  1007,  1011,  1014,  1016,  1019,
    1022,  1026,  1029,  1034,  1040,  1046,  1049,  1053,  1055,  1058,
    1061,  1065,  1067,  1069,  1072,  1076,  1080,  1085,  1088,  1091,
    1095,  1097,  1100,  1103,  1106,  1110,  1114,  1116,  1119,  1121,
    1124,  1127,  1131,  1134,  1138,  1141,  1145,  1147,  1150,  1153,
    1157,  1162,  1168,  1171,  1175,  1180,  1184,  1189,  1194,  1200,
    1203,  1205,  1208,  1211,  1215,  1218,  1222,  1227,  1232,  1237,
    1243,  1249,  1255,  1261,  1268,  1275,  1281,  1287,  1294,  1301,
    1308,  1315,  1321,  1328,  1335,  1342,  1350,  1358,  1366,  1374,
    1383,  1392,  1400,  1408,  1417,  1426,  1435,  1444,  1451,  1459,
    1467,  1475,  1484,  1493,  1502,  1511,  1521,  1531,  1540,  1549,
    1559,  1569,  1579,  1589,  1592,  1596,  1599,  1603,  1605,  1607,
    1610,  1613,  1619,  1623,  1627,  1632,  1639,  1642,  1645,  1648,
    1652,  1656,  1660,  1667,  1672,  1677,  1683,  1691,  1695,  1698,
    1702,  1705,  1709,  1713,  1715,  1718,  1720,  1722,  1727,  1733,
    1736]])


m4_define([b4_check],
[[    37,    38,   195,   290,   148,   442,   160,   161,    63,    64,
     271,    66,    49,   298,    51,    35,   170,     3,     4,    50,
     438,    52,   440,    60,    61,    62,   214,   196,    69,   113,
      67,   556,    39,   189,    24,   560,    22,    20,    20,    25,
      76,   216,    20,    50,   218,    52,    39,   223,   224,    24,
      36,    12,    13,    60,    61,    62,    44,    50,    66,    52,
     220,   221,    24,   116,    24,    24,    88,    24,    24,    88,
      24,    12,    65,    44,    40,    23,   266,    99,     5,   269,
      99,    17,     5,    44,    20,   275,    13,    95,    96,    97,
      13,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    40,    44,    44,   146,    88,    24,    20,    99,
      88,   148,   149,    20,    24,    12,    24,    99,   101,    24,
      55,    69,    24,    24,    99,    24,   282,   271,    24,   100,
      10,    11,    56,   570,   659,   289,   102,    99,    62,    99,
      99,    21,    99,    99,   332,    99,   290,    44,   134,   567,
     136,   137,   189,   190,   323,   239,   193,    37,   194,   334,
     100,   446,   336,   200,   102,   201,   101,   343,   344,    44,
      50,   226,   227,   228,   229,    44,    88,   232,   198,   339,
     340,    88,    99,   190,    44,    65,   193,    67,    68,    99,
     243,    99,    44,   200,    99,    44,   249,    99,    99,    44,
      99,    13,   255,    99,   394,     5,    44,    44,   398,   399,
      44,    91,    92,   403,   475,     5,    13,     5,    44,   409,
     213,   411,    12,    13,    44,   100,     0,    44,    44,   102,
      44,   100,    44,    89,   271,   276,   277,    44,     3,    16,
     100,    14,     5,    99,    44,   282,    23,    44,   100,   286,
     287,   100,     5,   290,    44,   100,    44,   294,   299,    32,
      13,   298,   100,   100,    56,   302,   100,    98,   555,   306,
      62,   278,   309,   280,   305,   261,   262,   314,   315,   265,
     100,    44,   268,   100,   100,   278,   100,   280,   432,   326,
      88,    44,    69,   100,   349,   350,   351,   352,   305,   306,
     355,     5,   309,   457,    48,   325,     4,     5,   301,    13,
     363,     5,   305,   366,    12,    13,     5,    95,   371,   326,
       5,   374,   100,    12,     5,     5,   379,    12,    13,   382,
      44,   475,   522,    13,    44,   525,   329,     5,   528,    89,
      44,   531,    89,     5,    12,   535,    98,   537,     5,    99,
      12,    13,    99,     5,    58,    59,    60,    89,    44,    44,
      58,    59,    60,    44,    58,    59,    60,    99,   655,   406,
      99,   658,    89,    58,    59,    60,    44,     5,    58,    59,
      60,   574,    99,     5,   421,    13,    44,    44,     5,    44,
      12,   428,    44,   430,   431,   432,    58,    59,    60,   385,
     437,    88,   388,   440,     6,   442,   447,     5,    17,   446,
     417,   418,    89,    90,    12,     5,    44,   454,   455,     5,
       8,   458,    12,   460,   417,   418,    12,    44,     5,    88,
     483,    12,    13,     9,   487,    66,   723,    44,   475,   476,
     493,    58,    59,    60,   497,     5,    44,   454,   455,    89,
     503,    58,    59,    60,   507,    16,    88,    18,    44,    99,
      93,    94,    10,    44,    95,    96,    97,    15,    58,    59,
      60,   105,    58,    59,    60,    89,   103,    58,    59,    60,
     104,    58,    59,    60,    44,    99,   523,    16,    12,    18,
      38,    39,   529,    41,    42,    43,    44,    45,    58,    59,
      60,    15,   539,    44,    89,   542,   547,   548,    13,    89,
      63,    89,   553,   657,    99,    63,    64,    88,   555,    99,
      44,    99,     5,    71,    38,    39,    44,    41,    42,    43,
      44,    45,   725,   570,    58,    59,    60,    89,   102,    44,
     577,    89,    90,    44,     5,    93,    94,    99,    44,    63,
      64,    12,    13,    58,    59,    60,    89,    71,   106,    89,
     108,   109,    58,    59,    60,    44,    99,    89,    89,    99,
      93,    94,    89,    89,    90,    89,    90,    99,    99,    93,
      94,   618,    99,     5,    44,     5,   623,    44,   625,     5,
      44,     5,   106,   630,   108,    44,     5,   634,    89,   640,
     637,    99,    99,   644,    88,    48,   643,   648,   649,   650,
      88,    21,    88,    88,   100,   652,   109,   107,   655,     8,
     657,   658,     9,    88,    21,    10,   103,    44,    99,   666,
     104,    44,   105,   100,   100,    88,    44,    44,    44,    44,
      44,    44,    88,    44,    88,   107,    88,    99,    88,    88,
      88,   688,    88,    88,   691,    16,   101,    16,   695,   100,
      44,   698,    99,    88,   701,    99,    99,   704,   709,   710,
     100,    99,    21,   100,   100,    99,    99,    88,    99,    44,
      44,   100,   719,   101,    99,   722,   723,    99,     4,    88,
       6,    44,   729,    88,    10,    88,    44,    99,    44,    15,
     100,    17,   100,    19,    20,    99,    22,    99,    99,    25,
     751,   752,   100,    99,    44,    48,    88,   100,   755,    99,
      99,   758,    38,    39,   100,    41,    42,    43,    44,    45,
      99,    47,   100,    99,    88,    51,    52,    53,    54,    99,
     107,    99,    99,    99,    99,    88,    88,    63,    64,   100,
      88,    16,    44,   100,    70,    71,    72,    73,    99,    99,
     319,   100,    99,    99,     0,   100,   100,    99,    99,    88,
       4,    99,    88,    89,    90,    99,    10,    93,    94,    95,
     100,    15,    99,    17,    99,    19,    20,   100,    22,    99,
     106,    25,   108,    99,   156,   100,    99,    99,    99,    99,
      99,    99,    99,    99,    38,    39,    99,    41,    42,    43,
      44,    45,    99,    47,    99,    99,    10,    51,    52,    53,
      54,    15,    99,    99,    99,    99,    99,    99,    99,    63,
      64,    99,    99,    99,   212,    99,    70,    71,    72,    73,
      99,    99,    99,    99,    38,    39,    40,    41,    42,    43,
      44,    45,   422,    70,    88,    89,    90,    10,   187,    93,
      94,    95,    15,    62,   234,   476,   161,   449,    36,    63,
      64,   756,   106,    -1,   108,   144,   560,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    -1,    -1,    89,    90,    10,    -1,    93,
      94,    95,    15,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      63,    64,   106,    -1,   108,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,    42,
      43,    44,    45,    -1,    -1,    -1,    89,    90,    10,    -1,
      93,    94,    95,    15,    -1,    -1,    -1,   100,    -1,    -1,
      63,    64,    -1,   106,    -1,   108,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    -1,    89,    90,    10,    -1,
      93,    94,    95,    15,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    63,    64,   106,    -1,   108,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    -1,    -1,    89,    90,    10,
      -1,    93,    94,    95,    15,    -1,    -1,    -1,   100,    -1,
      -1,    63,    64,    -1,   106,    -1,   108,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    43,    44,    45,    10,    -1,    89,    90,    -1,
      15,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    64,   106,   107,   108,    -1,    -1,    -1,
      71,    -1,    -1,    38,    39,    40,    41,    42,    43,    44,
      45,    10,    -1,    -1,    -1,    -1,    15,    88,    89,    90,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    63,    64,
      -1,    -1,    -1,    -1,    -1,   106,    71,   108,    -1,    38,
      39,    -1,    41,    42,    43,    44,    45,    10,    -1,    -1,
      -1,    -1,    15,    -1,    89,    90,    -1,    -1,    93,    94,
      95,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,
      -1,   106,    71,   108,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    -1,    -1,    -1,    -1,    10,    -1,    -1,
      89,    90,    15,    -1,    93,    94,    95,    -1,    -1,    -1,
      63,    64,    -1,    -1,    -1,    -1,    -1,   106,    71,   108,
      -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
      43,    44,    45,    -1,    -1,    -1,    89,    90,    10,    -1,
      93,    94,    -1,    15,    -1,    -1,    99,    -1,    -1,    -1,
      63,    64,    -1,   106,    -1,   108,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    40,    41,
      42,    43,    44,    45,    10,    -1,    89,    90,    -1,    15,
      93,    94,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
      -1,    63,    64,   106,    -1,   108,    -1,    -1,    -1,    71,
      -1,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
      10,    -1,    -1,    -1,    -1,    15,    -1,    89,    90,    -1,
      -1,    93,    94,    -1,    -1,    -1,    -1,    63,    64,    -1,
      -1,    -1,    -1,    -1,   106,    71,   108,    -1,    38,    39,
      40,    41,    42,    43,    44,    45,    10,    -1,    -1,    -1,
      -1,    15,    -1,    89,    90,    -1,    -1,    93,    94,    -1,
      -1,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,
     106,    71,   108,    -1,    38,    39,    40,    41,    42,    43,
      44,    45,    10,    -1,    -1,    -1,    -1,    15,    -1,    89,
      90,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    63,
      64,    -1,    -1,    -1,    -1,    -1,   106,    71,   108,    -1,
      38,    39,    -1,    41,    42,    43,    44,    45,    -1,    -1,
      -1,    -1,    -1,    15,    -1,    89,    90,    -1,    -1,    93,
      94,    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,
      -1,    -1,   106,    71,   108,    -1,    38,    39,    -1,    41,
      42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    90,    -1,    -1,    93,    94,    -1,    -1,    -1,
      -1,    63,    64,    -1,    -1,    -1,    -1,    -1,   106,    71,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    -1,
      -1,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,    -1,   108]])


m4_define([b4_nterms_number],
[[100]])


m4_define([b4_rline_max],
[[1572]])


m4_define([b4_dprec],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0]])


m4_define([b4_percent_define_loc(lr.default-reductions)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_rline],
[[     0,   123,   123,   133,   134,   138,   142,   159,   167,   168,
     169,   178,   186,   187,   188,   196,   204,   205,   206,   214,
     222,   230,   231,   238,   246,   247,   248,   256,   263,   264,
     265,   273,   281,   282,   283,   291,   298,   299,   300,   307,
     316,   317,   320,   323,   325,   329,   332,   333,   334,   335,
     336,   337,   338,   341,   342,   343,   362,   363,   366,   367,
     368,   369,   370,   374,   375,   378,   379,   382,   383,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   399,   400,   401,   403,   404,   407,   410,   411,   412,
     415,   418,   421,   422,   426,   429,   432,   433,   435,   442,
     452,   453,   456,   457,   460,   464,   470,   471,   474,   475,
     478,   479,   482,   483,   484,   485,   486,   488,   492,   498,
     499,   502,   503,   504,   505,   508,   509,   512,   513,   516,
     517,   518,   519,   522,   523,   526,   527,   530,   531,   534,
     535,   538,   539,   540,   543,   544,   550,   554,   557,   558,
     561,   562,   565,   566,   569,   570,   573,   574,   577,   578,
     581,   582,   585,   586,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   602,   605,   606,   608,   612,
     615,   616,   619,   620,   623,   624,   627,   628,   631,   632,
     633,   634,   637,   641,   644,   648,   652,   658,   664,   667,
     677,   681,   685,   689,   690,   694,   698,   702,   705,   706,
     711,   712,   713,   714,   781,   784,   789,   794,   799,   800,
     803,   804,   807,   808,   809,   810,   811,   812,   813,   817,
     821,   825,   828,   833,   840,   846,   852,   858,   864,   870,
     876,   882,   888,   894,   900,   906,   912,   918,   924,   932,
     937,   942,   943,   947,   948,   949,   952,   957,   958,   959,
     960,   963,   964,   965,   966,   967,   968,   969,   970,   971,
     972,   975,   982,   985,   988,   992,   993,   996,   997,   998,
     999,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,  1010,
    1013,  1014,  1017,  1018,  1019,  1020,  1023,  1024,  1025,  1026,
    1027,  1028,  1029,  1030,  1033,  1034,  1037,  1038,  1039,  1040,
    1043,  1044,  1046,  1047,  1050,  1051,  1052,  1053,  1054,  1055,
    1056,  1057,  1058,  1059,  1061,  1067,  1075,  1082,  1089,  1096,
    1103,  1110,  1117,  1124,  1131,  1138,  1145,  1152,  1159,  1166,
    1173,  1180,  1188,  1195,  1202,  1209,  1216,  1223,  1230,  1237,
    1244,  1251,  1258,  1265,  1272,  1279,  1286,  1293,  1300,  1307,
    1314,  1321,  1328,  1335,  1342,  1349,  1356,  1363,  1364,  1365,
    1372,  1379,  1386,  1396,  1397,  1400,  1401,  1404,  1405,  1407,
    1409,  1417,  1430,  1439,  1448,  1456,  1468,  1475,  1476,  1477,
    1478,  1480,  1488,  1501,  1509,  1517,  1525,  1538,  1548,  1549,
    1552,  1553,  1556,  1558,  1559,  1563,  1564,  1567,  1568,  1571,
    1572]])


m4_define([b4_prhs_min],
[[0]])


m4_define([b4_percent_define_bison_variables(lr.keep-unreachable-states)],
[[]])


m4_define([b4_spec_outfile],
[[yacc.cpp]])


m4_define([b4_translate_max],
[[109]])


m4_define([b4_user_token_number_max],
[[342]])


m4_define([b4_r1_min],
[[0]])


m4_define([b4_max_left_semantic_context],
[[0]])


m4_define([b4_pgoto_max],
[[832]])


m4_define([b4_rules_number],
[[410]])


m4_define([b4_file_name_all_but_ext],
[[yacc]])


m4_define([b4_error_verbose_flag],
[[1]])


m4_define([b4_percent_define(lr.type)],
[[lalr]])


m4_define([b4_r2_min],
[[0]])


m4_define([b4_pact],
[[   302,    12,   174,   320,   410,  -526,  -526,  -526,   226,   235,
    -526,   539,   169,  -526,   338,   684,   127,  -526,   202,   256,
     144,   286,   306,    73,   290,   423,   311,  -526,  -526,   314,
      77,   378,   338,  -526,  -526,  1342,   315,  1342,  1342,  1378,
     271,   342,  -526,  -526,  -526,  -526,  -526,   323,  -526,  1342,
    1378,  1342,  1378,   345,  -526,  -526,  -526,  -526,  -526,  -526,
    1081,   928,   968,   486,   486,   486,   486,   452,  -526,   684,
     766,  -526,   248,  -526,    65,  -526,   313,  -526,  -526,  -526,
    -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,
    -526,  -526,  -526,   398,  -526,   341,   391,   412,   424,  -526,
     368,   120,   373,   376,   366,    76,   367,    -8,  -526,   447,
      34,   459,   436,    12,   429,   482,    29,  -526,   250,   499,
     517,   521,   578,   253,   540,   580,   543,   584,   268,   546,
     586,   551,   591,  -526,   419,  -526,   296,   414,   509,   210,
    -526,   502,   503,   516,   522,   590,   684,   524,   806,  1117,
     -22,   557,  -526,   525,  -526,  -526,   524,  -526,  -526,  -526,
      22,    88,   514,  -526,   510,  -526,  -526,  -526,  -526,  -526,
      18,   507,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,
    -526,  -526,  -526,  -526,  -526,  -526,  -526,  1009,  -526,  1342,
    1081,  -526,  -526,  1081,   341,  1342,  1342,   611,  1342,   613,
    1081,   535,   603,  -526,  -526,  -526,  -526,   615,  -526,  -526,
    -526,  -526,   120,   486,   486,   523,   486,   526,   486,   527,
     486,   486,   208,   486,   486,   477,   486,   486,   486,   486,
     369,  -526,   486,   583,    62,  -526,  -526,   587,  -526,    12,
    -526,   529,   533,    60,  -526,   283,   592,   360,   593,   125,
    -526,   386,   594,   415,   595,   131,  -526,   420,   596,   422,
     597,   495,   476,  -526,    39,   383,   509,   247,   440,   509,
     332,   847,    10,   372,   402,   509,   684,   684,  1378,   547,
    1378,   554,  1342,    52,   599,   556,  1342,  1342,  -526,    17,
    1045,   534,  -526,   558,  1157,   548,   538,   560,  1342,   684,
     -19,   486,  1342,   561,   556,  1378,  1081,   562,  -526,  1081,
     564,  -526,  -526,  -526,  1342,  1342,   565,  -526,  -526,   555,
    -526,   639,  -526,  1342,  -526,  1342,  1081,  -526,  -526,   486,
    -526,  -526,   486,  -526,   486,  -526,   486,  -526,  -526,   486,
     486,  -526,  -526,   486,   486,  -526,  -526,  -526,  -526,   486,
     486,   486,   486,  -526,   484,   486,  -526,  -526,  -526,  -526,
     563,   566,   559,   140,  -526,   448,   148,  -526,   467,   567,
     570,   151,  -526,   470,   155,  -526,   478,   572,   573,   162,
    -526,   479,   163,  -526,   483,   393,  -526,   188,   504,  -526,
      59,   203,   103,  -526,   509,   200,    25,   212,   509,   509,
     237,    38,   319,   509,  -526,   574,  1342,  -526,   343,   509,
     348,   509,    40,   439,   641,  -526,  -526,  1378,  1378,   576,
     577,  1342,   223,   579,  -526,   616,  -526,   575,  1342,  -526,
    1342,  1342,  1342,   589,   601,  -526,   581,  1342,   585,  -526,
    1157,  -526,  1117,   605,  -526,  -526,  1342,   684,  -526,   607,
    -526,   651,  -526,  -526,  1081,  1081,  -526,    93,  1342,  -526,
    1342,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,
    -526,  -526,  -526,  -526,  -526,   887,  1117,  -526,  -526,  -526,
     588,   598,   600,   166,  -526,   606,   602,   180,  -526,  -526,
     608,   609,   612,   183,  -526,   614,   617,   184,  -526,  -526,
     620,   621,   624,   186,  -526,   631,   632,   193,  -526,  -526,
     635,   636,  -526,  -526,   647,   652,  -526,   654,  -526,   670,
    -526,    41,   509,  1342,  -526,   509,    43,    44,   509,  1342,
    -526,   509,    46,  -526,   634,   509,    83,   509,    90,  1342,
    -526,   640,  1342,   471,   642,  -526,  -526,   684,   684,   667,
     643,   644,   645,   684,  -526,  1198,   628,   646,  -526,  -526,
     657,   582,   658,  -526,   649,  -526,  -526,   585,  -526,  -526,
    1117,  -526,  -526,  -526,  1342,  -526,  -526,  1342,   662,  -526,
    -526,  -526,  -526,   653,   633,  -526,  -526,   659,   660,   661,
    -526,   663,   664,   665,  -526,  -526,   668,   669,   666,  -526,
     672,   676,   680,  -526,  -526,   683,   685,   687,  -526,   690,
     694,   695,  -526,  -526,  -526,  -526,  -526,  -526,  1342,  -526,
      92,   697,    95,  1342,  -526,  1342,  -526,    98,   698,    99,
    1342,  -526,  -526,   101,  1342,  -526,   104,  1342,  -526,   699,
     684,   700,   701,  1342,   684,   735,  -526,   708,   684,   684,
     684,  -526,  1342,  -526,  -526,  1234,   646,  1342,  1270,   681,
     646,  -526,  -526,  -526,    64,   702,  1342,  -526,  -526,  -526,
    -526,   703,  -526,  -526,   704,  -526,  -526,   707,  -526,  -526,
     713,  -526,  -526,   715,  -526,  -526,   716,   723,  1342,  -526,
    -526,  1342,  -526,   724,   725,  1342,  -526,  -526,  1342,  -526,
     726,  1342,  -526,   727,  1342,  -526,   728,  -526,  -526,   684,
     684,   729,  -526,   732,  -526,  -526,  -526,  -526,  -526,  1342,
    -526,  -526,  1342,  1306,   646,  1342,  -526,  -526,  -526,  1342,
     733,  -526,  -526,  -526,  -526,  -526,  -526,  -526,   734,   736,
    -526,  -526,   741,   742,  -526,   743,  -526,   744,  -526,  -526,
    -526,   684,   684,  -526,  -526,  1342,    64,  -526,  1342,  -526,
    -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526,  -526]])


m4_define([b4_dprec_min],
[[0]])


m4_define([b4_defact_min],
[[0]])


m4_define([b4_percent_define(lr.keep-unreachable-states)],
[[false]])


m4_define([b4_synclines_flag],
[[1]])


m4_define([b4_nondeterministic_flag],
[[1]])


m4_define([b4_defines_flag],
[[1]])


m4_define([b4_conflict_list_heads_max],
[[0]])


m4_define([b4_dir_prefix],
[[]])


m4_define([b4_merger_max],
[[0]])


m4_define([b4_undef_token_number],
[[2]])


m4_define([b4_percent_define_bison_variables(lr.type)],
[[]])


m4_define([b4_percent_define_loc(lr.keep-unreachable-states)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_prhs_max],
[[1736]])


m4_define([b4_spec_file_prefix],
[[]])


m4_define([b4_r1_max],
[[209]])


m4_define([b4_percent_define_bison_variables(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_loc(lr.type)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_toknum_min],
[[0]])


m4_define([b4_percent_define(lr.default-reductions)],
[[most]])


m4_define([b4_spec_defines_file],
[[yacc.hpp]])


m4_define([b4_conflicting_rules_min],
[[0]])


m4_define([b4_r1],
[[     0,   110,   111,   112,   112,   113,   113,   114,   115,   115,
     115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
     115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
     115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
     116,   116,   117,   117,   118,   119,   119,   119,   119,   119,
     119,   119,   119,   120,   120,   120,   121,   121,   122,   122,
     122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
     125,   126,   126,   126,   127,   128,   129,   130,   130,   130,
     131,   132,   133,   133,   134,   135,   136,   136,   137,   137,
     138,   138,   139,   139,   140,   140,   141,   141,   142,   142,
     143,   143,   144,   144,   144,   144,   144,   144,   144,   145,
     145,   146,   146,   146,   146,   147,   147,   148,   148,   149,
     149,   149,   149,   150,   150,   151,   151,   152,   152,   153,
     153,   154,   154,   154,   155,   155,   156,   156,   157,   157,
     158,   158,   159,   159,   160,   160,   161,   161,   162,   162,
     163,   163,   164,   164,   165,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   166,   167,   167,   168,   168,
     169,   169,   170,   170,   171,   171,   172,   172,   173,   173,
     173,   173,   174,   174,   175,   175,   175,   175,   176,   176,
     177,   177,   177,   177,   177,   177,   177,   177,   178,   178,
     179,   179,   179,   179,   180,   180,   181,   181,   181,   181,
     182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   183,   183,   183,   183,   184,   184,   184,
     184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   186,   186,   186,   186,   187,   187,   188,   188,   188,
     188,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     190,   190,   191,   191,   191,   191,   192,   192,   192,   192,
     192,   192,   192,   192,   193,   193,   194,   194,   194,   194,
     195,   195,   196,   196,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   200,   200,   201,   201,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   203,   203,
     204,   204,   205,   206,   206,   207,   207,   208,   208,   209,
     209]])


m4_define([b4_pre_prologue],
[[]b4_syncline(4, [["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])[

	#define _CRT_SECURE_NO_WARNINGS
	#include <iostream>
	#include <FlexLexer.h>
	#include <string>
	#include <stack>
	#include "Program.h"
	#include "SyntaxError.h"
	#include <fstream>
	#include "Streams.h"
	#include "ErrorRevovery.h"
	#include "compilerProject/AST.h"
	#include "compilerProject/getString.h"
	#include <set>
	#include "compilerProject/MyParser.h"
	using namespace std;
	class ColonStack
	{
		public:
		ColonStack(int line, int col){colNum = col; lineNum = line;}
		int colNum,lineNum;
	};
	stack<ColonStack*>colonStack;
	int yylex(void);
	int yyparse();
	int strlength(char *);
	void yyerror(const char *);
	int lineno=0,colnumber=0;
	ErrorRecovery* err=new ErrorRecovery();
	FlexLexer* lexer = new yyFlexLexer();
	extern string sourceFile="";
	string dir_path="";
	string temp_id="";
	stack<string> temp_id1;
	vector<string> temp_id2;
	int visit_num=0;//this variable for detected that if in right side in expretion
	char* i_type;
	Node* k;
	char* t_id=new char@{10@};
	char* acc_mod=new char@{8@};
	vector<char*> sto_mod;
	bool ss=false;
	bool ff=false;
	bool pro= false;
	bool pp=true;
	bool self=false;
	bool is_list=false;
	bool is_dic=false;
	int linefunc=0;
	int colmfunc=0;
	bool constant =false;
	Node* lastNode;
	operand op;
	bool v_static,v_final;
	vector<char *>inhertance_list;


	vector<char *>ID_list;
	Variable* v;
	Type* t;
	class Function * testfunction;
	vector<char *> parameters;
	class Parser
	{
		public:
		int	parse()
		{
			return yyparse();
		}
	};
	MyParser * p = new MyParser();
	AST * ast = new AST();
]])


m4_define([b4_r2],
[[     0,     2,     2,     3,     1,     2,     1,     2,     6,     7,
       4,     5,     7,     7,     5,     5,     8,     8,     6,     6,
       8,     8,     6,     6,     9,     9,     7,     7,     8,     8,
       6,     6,     9,     9,     7,     7,     9,     9,     7,     7,
       3,     2,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     2,     3,     2,     1,     2,
       1,     2,     1,     3,     2,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     2,     3,     1,     2,
       1,     3,     1,     2,     2,     3,     2,     3,     2,     3,
       2,     3,     1,     1,     1,     1,     1,     1,     2,     4,
       5,     4,     5,     7,     8,     4,     7,     6,     9,     4,
       7,     7,     6,     3,     4,     2,     3,     4,     5,     1,
       3,     1,     2,     4,     1,     2,     2,     1,     1,     5,
       2,     3,     1,     2,     2,     3,     1,     2,     2,     1,
       2,     3,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     2,     2,     2,     3,     1,     2,
       2,     3,     1,     2,     2,     3,     1,     2,     2,     2,
       3,     3,     1,     2,     2,     2,     3,     3,     1,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     1,     2,
       2,     2,     2,     1,     1,     2,     1,     2,     4,     3,
       1,     2,     2,     3,     2,     2,     3,     3,     1,     3,
       4,     4,     2,     3,     3,     3,     4,     4,     4,     4,
       5,     5,     4,     4,     5,     5,     5,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     2,     1,     2,     2,     3,     2,     1,     2,     2,
       3,     2,     4,     5,     5,     2,     3,     1,     2,     2,
       3,     1,     1,     2,     3,     3,     4,     2,     2,     3,
       1,     2,     2,     2,     3,     3,     1,     2,     1,     2,
       2,     3,     2,     3,     2,     3,     1,     2,     2,     3,
       4,     5,     2,     3,     4,     3,     4,     4,     5,     2,
       1,     2,     2,     3,     2,     3,     4,     4,     4,     5,
       5,     5,     5,     6,     6,     5,     5,     6,     6,     6,
       6,     5,     6,     6,     6,     7,     7,     7,     7,     8,
       8,     7,     7,     8,     8,     8,     8,     6,     7,     7,
       7,     8,     8,     8,     8,     9,     9,     8,     8,     9,
       9,     9,     9,     2,     3,     2,     3,     1,     1,     2,
       2,     5,     3,     3,     4,     6,     2,     2,     2,     3,
       3,     3,     6,     4,     4,     5,     7,     3,     2,     3,
       2,     3,     3,     1,     2,     1,     1,     4,     5,     2,
       3]])


m4_define([b4_check_min],
[[-1]])


m4_define([b4_states_number],
[[770]])


m4_define([b4_r2_max],
[[9]])


m4_define([b4_dprec_max],
[[0]])


m4_define([b4_defgoto],
[[    -1,     8,     9,    10,    68,    69,   272,    70,    71,    72,
      73,   188,    74,    75,    76,   189,    11,    77,    78,    79,
      80,    81,    82,    83,    84,    13,   114,    17,    18,    19,
     112,   285,    85,    86,    87,   543,    88,    89,    90,    91,
     422,   300,    92,   150,   423,    93,    94,    95,   197,    96,
     199,    97,    98,   212,    99,   213,   100,   215,   101,   217,
     102,   219,   103,   222,   104,   225,   105,   230,   106,   107,
     234,   108,   109,   110,   307,   162,   235,   443,   296,   297,
     439,   279,   145,   303,   154,   578,   316,   171,    14,    15,
     290,   556,   291,   557,   432,   653,   293,   726,   727,   728]])


m4_define([b4_defact_max],
[[410]])


m4_define([b4_stos],
[[     0,     4,     5,    12,    13,    58,    59,    60,   111,   112,
     113,   126,   134,   135,   198,   199,    44,   137,   138,   139,
      44,     5,    13,   126,     5,    12,   126,     0,     3,     5,
      12,    13,    98,   113,     6,    10,    15,    17,    19,    20,
      22,    25,    38,    39,    41,    42,    43,    44,    45,    47,
      51,    52,    53,    54,    63,    64,    70,    71,    72,    73,
      88,    89,    90,    93,    94,    95,   106,   108,   114,   115,
     117,   118,   119,   120,   122,   123,   124,   127,   128,   129,
     130,   131,   132,   133,   134,   142,   143,   144,   146,   147,
     148,   149,   152,   155,   156,   157,   159,   161,   162,   164,
     166,   168,   170,   172,   174,   176,   178,   179,   181,   182,
     183,   102,   140,    88,   136,    48,    89,    99,    44,     5,
     126,     5,    13,    44,     5,   126,     5,    12,    44,     5,
      13,     5,    12,   113,    15,   162,    12,    13,    44,   126,
     198,   157,   157,   166,   168,   192,    99,    44,    89,    90,
     153,   157,   192,   157,   194,   192,    44,   157,   166,   100,
     157,   166,   185,   107,   185,   179,   179,   168,   179,   109,
     157,   197,   156,   155,    98,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    55,   101,   121,   125,
      88,   123,     6,    88,   124,    17,     8,   158,     9,   160,
      88,   124,    10,    11,    21,    37,    50,    65,    67,    68,
      91,    92,   163,   165,   103,   167,   104,   169,   105,   171,
      56,    62,   173,    93,    94,   175,    66,    95,    96,    97,
     177,    63,    40,   102,   180,   186,    44,   102,   138,    88,
      44,   100,   137,    89,    99,    44,     5,    44,     5,    89,
      99,    44,     5,    44,     5,    89,    99,    44,     5,    44,
       5,    12,    13,    44,   126,    13,    44,   126,    12,    44,
     126,    89,   116,    12,    13,    44,    99,    99,    88,   191,
      88,   191,    21,   156,    88,   141,    40,    95,   100,   157,
     200,   202,   205,   206,    99,   157,   188,   189,    88,    99,
     151,    48,    88,   193,   141,    20,    88,   184,   208,    88,
     184,   208,   100,   107,    88,    99,   196,   208,   109,   122,
     194,   159,   161,     8,   162,     9,    88,    21,    10,   165,
     168,   170,   103,   172,   104,   174,   105,   176,   176,    56,
      62,   178,   178,    93,    94,   179,   179,   179,   179,    66,
      95,    96,    97,   179,    44,    40,   186,    44,   138,    99,
     100,   100,   137,    89,    99,    44,    89,    99,    44,   100,
     137,    89,    99,    44,    89,    99,    44,   100,   137,    89,
      99,    44,    89,    99,    44,    13,    44,   126,    12,    44,
     126,    12,    13,    44,    44,   126,   116,    13,    44,    44,
     126,   116,    12,    44,   100,   202,    24,    99,    13,    44,
      12,    44,   116,   156,   156,   166,   168,    88,    88,   194,
      23,    69,   150,   154,    44,    88,   157,   157,   101,   208,
      40,    95,   204,   205,   206,   100,    88,    99,   157,   190,
      99,   107,    88,   187,   153,   156,    88,    99,   168,   157,
      88,   192,   157,   166,    88,    88,   157,   157,    88,   121,
      16,   161,   162,   168,   170,   172,   174,   176,   176,   178,
     178,   179,   179,   179,   179,    89,    90,   179,    99,    99,
     100,   100,   137,    89,    99,   100,   137,    89,    99,    99,
     100,   100,   137,    89,    99,   100,   137,    89,    99,    99,
     100,   100,   137,    89,    99,   100,   137,    89,    99,    44,
     126,    13,    44,    44,   126,    12,    44,    13,    44,    12,
      44,   116,    44,    24,    99,    44,   116,   116,    44,    24,
      99,    44,   116,   100,   157,    44,   116,    44,   116,    24,
      99,    16,    18,   145,    16,   166,   168,    99,    99,   157,
      16,    23,   154,    99,    44,    88,   201,   203,   157,   157,
     157,   157,   205,    88,    88,   157,   190,   157,   190,   189,
      88,   153,   156,   193,    21,   157,   166,    88,   195,   208,
     157,   157,   100,   202,   188,    99,    99,   100,   100,   137,
      99,   100,   100,   137,    99,    99,   100,   100,   137,    99,
     100,   100,   137,    99,    99,   100,   100,   137,    99,   100,
     100,   137,    44,    44,    44,    44,    44,    44,    24,    99,
     116,   157,   116,    24,    99,    24,    99,   116,   157,   116,
      24,    99,    99,   116,    24,    99,   116,    24,    99,   157,
      99,   157,    16,    18,    99,   156,   156,    48,    99,    99,
      99,   156,    40,   205,   206,    88,   203,    88,    88,   201,
     203,    88,   190,   189,   159,   157,    88,   100,   107,    99,
      99,   100,    99,    99,   100,    99,    99,   100,    99,    99,
     100,    99,    99,   100,    99,    99,   100,   157,    24,    99,
      99,    24,    99,   157,   157,    24,    99,    99,    24,    99,
     157,    24,    99,   157,    24,    99,   157,    99,   156,    99,
      99,   157,   156,    16,    44,   156,   156,   156,   157,    40,
     206,   205,    40,    88,   203,    17,   207,   208,   209,    99,
     157,    99,    99,    99,    99,    99,    99,    99,   157,   157,
      99,    99,   157,   157,    99,   157,    99,   157,    99,   156,
     156,    99,    99,   157,   157,    40,   159,   157,    99,    99,
      99,    99,    99,    99,    99,   156,   156,   157,   207,   157]])


m4_define([b4_final_state_number],
[[27]])


m4_define([b4_defgoto_min],
[[-1]])


m4_define([b4_file_name],
[["C:\\Users\\AMER-HY\\Source\\Repos\\compiler-project-Copy-Copy\\yaccFinal.y"]])


m4_define([b4_percent_define_syncline(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_syncline(lr.type)],
[[]])


m4_define([b4_locations_flag],
[[0]])


m4_define([b4_rhs_min],
[[-1]])


m4_define([b4_pact_min],
[[-526]])


m4_define([b4_conflicting_rules],
[[     0]])


