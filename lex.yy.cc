/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>
#include <iostream>
using namespace std;


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
static yyconst short int yy_accept[248] =
    {   0,
        0,    0,   98,   98,    0,    0,    0,    0,  105,  104,
      103,    4,   58,   89,   94,   68,  104,  104,    5,    6,
       17,   60,    7,   62,   10,   66,   86,   86,    3,    8,
       76,   13,   81,  102,  102,  102,  102,   47,   48,   70,
       51,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   49,  104,   50,   97,
       96,   97,   98,   91,   90,   90,   71,   88,   94,   94,
       67,   57,   56,    0,  101,   16,   15,    0,   59,   61,
       72,    0,   95,   64,   65,   87,    0,   83,    0,    0,
        0,   86,   75,   77,   73,   30,   79,   80,  102,  102,

      102,  102,   69,   28,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   19,  102,   23,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   54,   55,
       98,   97,   97,   99,   93,    0,  100,   14,    9,   63,
       87,   84,   83,   85,   74,   78,  102,  102,  102,  102,
      102,  102,  102,   12,   31,  102,  102,   11,  102,  102,
       22,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   24,  102,  102,  102,   92,   87,  102,   46,   42,
      102,  102,  102,  102,   20,   18,  102,  102,  102,  102,
      102,   82,  102,  102,  102,  102,  102,  102,  102,  102,

      102,   27,  102,   43,  102,   44,    2,  102,  102,   33,
      102,  102,  102,  102,   32,  102,  102,  102,   38,  102,
      102,   21,   52,   29,  102,   26,  102,   37,    1,  102,
      102,  102,  102,   40,   35,   34,  102,   25,  102,   53,
       39,  102,   45,   36,  102,   41,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   10,   10,   31,   32,   31,   31,   31,   33,
       34,   34,   34,   34,   34,   34,   34,   35,   36,   34,
       34,   34,   34,   37,   34,   34,   34,   38,   34,   34,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   54,   61,   62,   63,   64,   65,   66,   67,
       68,   54,   69,   70,   71,   10,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[72] =
    {   0,
        1,    1,    1,    2,    1,    3,    3,    4,    3,    3,
        3,    3,    3,    3,    3,    5,    3,    3,    3,    3,
        3,    6,    6,    6,    6,    3,    3,    3,    3,    3,
        6,    6,    6,    7,    7,    7,    7,    7,    3,    3,
        3,    3,    7,    3,    6,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    3,    3,
        3
    } ;

static yyconst short int yy_base[257] =
    {   0,
        0,    0,   68,   69,    0,    0,   66,   67,  362,  363,
      363,  363,  332,  352,  350,  329,   66,  344,  363,  363,
       63,   74,  363,   86,  336,   65,  109,  115,  363,  363,
       72,  326,   53,    0,  309,  294,  291,  363,  363,  322,
      363,  288,  288,   62,  299,   69,   60,  291,   92,  287,
       99,   75,  282,  283,   52,  290,  363,   83,  363,    0,
        0,  127,    0,  334,  333,  300,  363,  363,    0,  330,
      363,  363,  363,  325,  324,  307,  363,  147,  363,  363,
      363,  315,  363,  305,  363,  363,  155,  161,  129,  134,
        0,  167,  304,  363,  363,  363,  363,  303,    0,  275,

      272,  265,  363,  266,  278,  281,  267,   72,  111,  276,
      276,  264,  260,  261,    0,  259,    0,  260,  255,  129,
      270,  262,  251,  268,  244,  258,  247,  260,  363,  363,
        0,  363,  145,  363,  363,  300,  363,  363,  363,  363,
      185,  152,  172,    0,  363,  363,  245,  257,  256,  255,
      258,  240,  238,    0,    0,  250,  250,    0,  249,  252,
        0,  250,  236,  238,  231,  140,  229,  235,  228,  225,
      225,    0,  231,  234,  229,  363,  363,  232,    0,    0,
      214,  219,  196,  181,    0,    0,  173,  176,  186,  169,
      170,    0,  183,  164,  181,  176,  171,  174,  161,  168,

      171,    0,  171,    0,  155,    0,    0,  159,  153,  159,
      158,  150,  165,  150,    0,  143,  157,  156,    0,  144,
      154,    0,    0,    0,  136,    0,  131,    0,    0,  117,
       86,   97,   67,    0,    0,    0,   77,    0,   58,    0,
        0,   44,    0,    0,   43,    0,  363,  235,  242,  249,
      256,  261,  263,  270,  277,   74
    } ;

static yyconst short int yy_def[257] =
    {   0,
      247,    1,  248,  248,  249,  249,  250,  250,  247,  247,
      247,  247,  247,  247,  251,  247,  247,  252,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  253,  253,  253,  253,  247,  247,  247,
      247,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  247,  247,  247,  254,
      254,  255,  254,  247,  247,  247,  247,  247,  251,  251,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      256,  247,  247,  247,  247,  247,  247,  247,  253,  253,

      253,  253,  247,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  247,  247,
      254,  247,  255,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  256,  247,  247,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  247,  247,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,    0,  247,  247,  247,
      247,  247,  247,  247,  247,  247
    } ;

static yyconst short int yy_nxt[435] =
    {   0,
       10,   11,   11,   12,   11,   11,   13,   14,   15,   10,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   28,   28,   29,   30,   31,   32,   33,
       34,   34,   35,   34,   36,   34,   37,   34,   38,   10,
       39,   40,   34,   41,   42,   43,   44,   45,   46,   47,
       48,   34,   49,   34,   34,   34,   34,   50,   34,   51,
       52,   53,   54,   34,   34,   55,   34,   56,   57,   58,
       59,   61,   61,   65,   65,   10,   10,   72,   76,  144,
       83,   97,   98,   62,   62,   84,   65,   65,   63,   63,
      246,   77,  245,   85,   73,   78,   78,   78,   78,   93,

       94,   95,   79,  126,  127,   66,   66,   78,   78,   78,
       78,  129,  112,  244,   80,   81,   86,  106,  113,  122,
      107,  154,   86,  123,  109,  243,  110,  155,   87,  242,
       88,   88,   88,   78,   87,  111,   92,   92,   92,   92,
       89,  115,  133,  119,   90,  241,   91,  134,  116,  117,
      142,  142,  130,  240,   89,  143,  143,  143,   86,  120,
      133,  239,  121,  156,   86,  134,   87,   90,   78,   78,
       78,   78,  157,  142,  142,   91,  141,  141,  141,  141,
       87,  166,   88,   88,   88,   78,   87,  167,   92,   92,
       92,   92,  177,  143,  143,  143,  193,  194,  238,  237,

      236,  235,  234,  233,  195,  232,  141,  141,  141,  141,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  177,   60,   60,   60,   60,   60,
       60,   60,   10,   10,   10,   10,   10,   10,   10,   64,
       64,   64,   64,   64,   64,   64,   69,  207,   69,   69,
       69,   69,   69,   74,   74,   74,   74,   74,   99,   99,
      131,  131,  131,  206,  205,  131,  131,  132,  132,  132,
      204,  132,  132,  132,  203,  202,  201,  200,  199,  198,
      197,  196,  192,  191,  190,  189,  188,  187,  186,  185,

      184,  183,  182,  181,  180,  179,  178,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  165,  164,  163,  162,
      161,  160,  159,  158,  153,  152,  151,  150,  149,  148,
      147,  146,  145,  140,  139,  138,  137,  137,   70,  136,
      135,  135,  128,  125,  124,  118,  114,  108,  105,  104,
      103,  102,  101,  100,   96,   82,   75,   71,   70,   68,
       67,  247,    9,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247
    } ;

static yyconst short int yy_chk[435] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    7,    8,    3,    4,   17,   21,  256,
       26,   33,   33,    3,    4,   26,    7,    8,    3,    4,
      245,   21,  242,   26,   17,   22,   22,   22,   22,   31,

       31,   31,   22,   55,   55,    7,    8,   24,   24,   24,
       24,   58,   47,  239,   24,   24,   27,   44,   47,   52,
       44,  108,   28,   52,   46,  237,   46,  108,   27,  233,
       27,   27,   27,   27,   28,   46,   28,   28,   28,   28,
       27,   49,   62,   51,   27,  232,   27,   62,   49,   49,
       89,   89,   58,  231,   27,   90,   90,   90,   27,   51,
      133,  230,   51,  109,   28,  133,   78,   27,   78,   78,
       78,   78,  109,  142,  142,   27,   87,   87,   87,   87,
       88,  120,   88,   88,   88,   88,   92,  120,   92,   92,
       92,   92,  141,  143,  143,  143,  166,  166,  227,  225,

      221,  220,  218,  217,  166,  216,  141,  141,  141,  141,
      214,  213,  212,  211,  210,  209,  208,  205,  203,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  191,  190,
      189,  188,  187,  184,  141,  248,  248,  248,  248,  248,
      248,  248,  249,  249,  249,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  251,  183,  251,  251,
      251,  251,  251,  252,  252,  252,  252,  252,  253,  253,
      254,  254,  254,  182,  181,  254,  254,  255,  255,  255,
      178,  255,  255,  255,  175,  174,  173,  171,  170,  169,
      168,  167,  165,  164,  163,  162,  160,  159,  157,  156,

      153,  152,  151,  150,  149,  148,  147,  136,  128,  127,
      126,  125,  124,  123,  122,  121,  119,  118,  116,  114,
      113,  112,  111,  110,  107,  106,  105,  104,  102,  101,
      100,   98,   93,   84,   82,   76,   75,   74,   70,   66,
       65,   64,   56,   54,   53,   50,   48,   45,   43,   42,
       40,   37,   36,   35,   32,   25,   18,   16,   15,   14,
       13,    9,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
#define INITIAL 0
#line 2 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
		#include "yacc.hpp"		
		#include <iostream>
		#include <istream>
		#include <ostream>		
		#include <FlexLexer.h>		
		extern int lineNum=1;
		extern int colNum=0;
		extern char* str = 0;
		int index;
#define multilinecomment 1

#define import 2

#define String 3

#line 522 "lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 40 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"

#line 651 "lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 248 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 363 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(import):
case YY_STATE_EOF(String):
#line 41 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{return ENDMARKER; 
				}
	YY_BREAK
case 1:
YY_RULE_SETUP
#line 43 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return IMPORT;
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				char* x = new char[255];
				x[0] = '\0';
				strcpy_s(x,255, yytext);
				yylval.r.strVal = x;
				return CLASS;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return ':';
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				lineNum ++;
				colNum = 0;
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				//return NEW_LINE;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return '(';
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return ')';
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 97 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return ',';
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 106 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return ';';
			} 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 115 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);									
				return DOT_3;
			}			 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 124 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);									
				return '.';
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	END;
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	DEF;
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'=';
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 160 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	STAR_2_EQUAL;
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 169 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	STAR_EQUAL;
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 178 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	STAR_2;
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 187 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'*';
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 196 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	ELSE;
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 205 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	IF;
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 214 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	ELIF;
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 223 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	WHILE;
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	FOR;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 241 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	IN;
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 250 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	TRY;
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 259 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	FINALLY;
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 268 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	EXPECT;
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 277 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	WITH;
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 286 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	AS;
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 295 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	ASSERT;
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 304 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	EQUAL;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 313 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	DEL;
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 322 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return PRINT;
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 331 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	FINAL;
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 340 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	STATIC;
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 349 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	RETURN;
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 358 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	NONLOCAL;
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 367 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	GLOBAL;
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 376 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	RAISE;
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 385 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	PRIVATE;
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 394 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	PUBLIC;
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 403 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	PROTECTED;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 412 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	TRUE;
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 421 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	FALSE;
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 430 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return BREAK;
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 439 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{	
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return CONTINUE;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 448 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{	
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return NONE;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 457 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'[';
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 466 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	']';
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 475 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'{';
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 484 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'}';
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 493 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				//return	RE_COT;
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 502 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	YIELD;
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 511 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	PRIMARY;
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 520 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	OR_EQUAL;
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 529 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	OR;
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 538 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	AND_EQUAL;
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 547 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	AND;
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 556 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				//return	NOT;
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 565 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	PLUS_EQUAL;
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 575 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	'+';
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 584 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	MINUS_EQUAL;
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 594 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'-';
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 603 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	DIV_2_EQUAL;
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 612 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	DIV_2;
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 621 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	DIV_EQUAL;
			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 630 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	'/';
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 639 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	MOD_EQUAL;
			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 648 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'%';
			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 657 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	SHAPOO_EQUAL;
			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 666 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'^';
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 675 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	NOT_EQUAL;
			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 684 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;			
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	ARROW;
				}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 693 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	MORE_LESS;
				}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 702 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	LESS_THAN_2_EQUAL;
				}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 711 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	LESS_THAN_2;
			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 720 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	'<';
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 729 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	LESS_OR_EQUAL;
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 738 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	MORE_THAN_2_EQUAL;
			}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 747 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);					
				return	MORE_OR_EQUAL;
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 756 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	MORE_THAN_2;
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 765 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	'>';
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 774 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;				
				yylval.r.strVal=new char[265];
				yylval.r.strVal[0]='\0';
				strcpy_s(yylval.r.strVal,255,yytext);
				return	PASS;
			}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 783 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
					int v = 1;int res=0;
					for(int n = (strlen(yytext)-1); n >1; n--)
					{
						res =res+ v*((int)yytext[n]-48);
						v=v*8;
					}
					colNum += strlen(yytext);
					yylval.r.colNum = colNum;
					yylval.r.lineNum = lineNum;	
					yylval.r.intVal = res;
					return NUMBER_INT;
				}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 796 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
					int v = 1;int res=0;
					for(int n = (strlen(yytext)-1); n >1; n--)
					{
						res =res+ v*((int)yytext[n]-48);v=v*2;
					}
					colNum += strlen(yytext);
					yylval.r.colNum = colNum;
					yylval.r.lineNum = lineNum;	
					yylval.r.intVal = res;
					return NUMBER_INT;
				}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 808 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
					int v = 1;int res=0;int val;
					for(int n = (strlen(yytext)-1); n >1; n--)
					{
						if((yytext[n]=='a')||(yytext[n]=='A')) 
						{val=10;} 
						else if((yytext[n]=='b')||(yytext[n]=='B'))
						{val=11;}
						else if((yytext[n]=='c')||(yytext[n]=='C'))
						{val=12;}
						else if((yytext[n]=='d')||(yytext[n]=='D'))
						{val=13;} 
						else if((yytext[n]=='e')||(yytext[n]=='E'))
						{val=14;}
						else if((yytext[n]=='f')||(yytext[n]=='F'))
						{val=15;}
						else 
						{
							val=(int)yytext[n]-48;
						} 
						res =res+ v*val;v=v*16;
					} 
					colNum += strlen(yytext);
					yylval.r.colNum = colNum;
					yylval.r.lineNum = lineNum;	
					yylval.r.intVal = res;
					return NUMBER_INT;
				}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 836 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				//cout<<":Integer value (yytext) ="<<yytext<<"\n";
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;								
				int i = atoi(yytext);
				//cout<<":Int value as int ="<<i<<endl;
				yylval.r.intVal = i;
				if(strlen(yytext) <= 4)
					return NUMBER_INT;
				else
					return NUMBER_LONG;
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 849 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
				//cout<<":Float value (yytext) ="<<yytext<<"\n";
				colNum += strlen(yytext);
				yylval.r.colNum = colNum;
				yylval.r.lineNum = lineNum;
				float f = atof(yytext);
				//cout<<":Float value as float ="<<f;
				yylval.r.floatVal = f;
				return NUMBER_FLOAT;							
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 859 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
							colNum+=2;
							return STRING;
						}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 863 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{							
							BEGIN (String);
							str = new char[255];
							index = 0;
						}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 868 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{//cout<<"str1="<<yytext<<"\n";
							colNum+=2;
						}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 871 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
							//cout<<"str2="<<yytext<<"\n";
							str[index++] = yytext[0];
							
						}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 876 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{cout<<"str3="<<yytext<<"\n"; BEGIN INITIAL;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 877 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{
							//cout<<"str4="<<yytext<<"\n"; 
							str[index++] = yytext[0];
							str[index] = '\0';
							int len = 0;
							while (str[len] != '\0')
								len++;							
							colNum += len;
							cout<<"The Full String is = "<<str<<"\n";
							yylval.r.strVal = str;
							yylval.r.colNum = colNum;
							//cout<<colNum;
							str = 0;
							BEGIN (INITIAL);
							return STRING;
						}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 893 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{cout<<"\t"<<yytext<<':'<<" it is a Single Line Comment \n";}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 894 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{colNum+=2;		BEGIN(multilinecomment);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 895 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{lineNum+=1;	BEGIN(multilinecomment);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 896 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{colNum+=strlen(yytext);	}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 897 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{colNum+=strlen(yytext);	}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 898 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{colNum+=strlen(yytext);	cout<<"multilinecomment \n"; BEGIN(INITIAL);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 899 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{yylval.r.charVal  = yytext[1]; return CHAR_VALUE;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 900 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{yylval.r.charVal  = yytext[1]; return CHAR_VALUE;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 901 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{						
							colNum += strlen(yytext);
							yylval.r.colNum = colNum;
							yylval.r.lineNum = lineNum;			
							char* x = new char[255];
							x[0] = '\0';
							strcpy_s(x,255, yytext);
							yylval.r.strVal = x;
							//cout<<yylval.r.colNum;
							return NAME;												
						}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 912 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
{colNum+=strlen(yytext);yylval.r.colNum=colNum;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 913 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"
ECHO;
	YY_BREAK
#line 2026 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 248 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 248 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 247);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 913 "C:\\Users\\Luay AL Assadi\\Documents\\Visual Studio 2013\\Projects\\compiler-project\\lex.l"

