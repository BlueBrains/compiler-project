dotted_name: NAME 
dotted_as_name: dotted_name 
dotted_name: NAME 
dotted_as_name: dotted_name 
comma_dotted_as_name_seq: ',' dotted_as_name 
dotted_name: NAME 
dotted_as_name: dotted_name 
comma_dotted_as_name_seq: comma_dotted_as_name_seq ',' dotted_as_name 
comma_dotted_as_name_seq: dotted_as_name comma_dotted_as_name_seq 
class_h: CLASS ID OPEN_S unit_list CLOSE_S 
parameters:'(' ')'
funcheader: DEF NAME parameters ':' 
str_seq:	STRING 
atom: str_seq
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
exprlist: 	expr 
print_stmt: PRINT exprlist 
small_stmt: print_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt
suite:	list_stmt END
funcdef:	funcheader suite 
compound_stmt: funcdef
stmt: compound_stmt
list_stmt : stmt
parameters:'(' ')'
funcheader: DEF NAME parameters ':' 
atom: NUMBER_INT 2
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist:	test 
return_stmt:	RETURN testlist 
flow_stmt: return_stmt
small_stmt: flow_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt
str_seq:	STRING 
atom: str_seq
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
exprlist: 	expr 
print_stmt: PRINT exprlist 
small_stmt: print_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt list_stmt
suite:	list_stmt END
funcdef:	funcheader suite 
compound_stmt: funcdef
stmt: compound_stmt
list_stmt : stmt list_stmt
parameters:'(' ')'
funcheader: DEF NAME parameters ':' 
atom: NAME
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist_star_expr: test 
str_seq:	STRING 
atom: str_seq
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist_star_expr: test 
right_testlist: '=' testlist_star_expr 
expr_stmt: testlist_star_expr right_testlist 
small_stmt: expr_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt
str_seq:	STRING 
atom: str_seq
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
atom: NAME
power:	atom
factor: power
atom: NUMBER_INT 3
power:	atom
factor: power
factor_seq: '*' factor 
term: 	factor factor_seq
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comma_expr_star_seq : 	',' expr 
exprlist: 	expr comma_expr_star_seq 
print_stmt: PRINT exprlist 
small_stmt: print_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt list_stmt
atom: NAME
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist_star_expr: test 
atom: NAME
trailer:	'.' NAME()
trailer_seq: trailer 
power: atom trailer_seq 
factor: power
Error: Undeclareted Variable at Line No:16 Column No:15
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist_star_expr: test 
right_testlist: '=' testlist_star_expr 
expr_stmt: testlist_star_expr right_testlist 
small_stmt: expr_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt list_stmt
str_seq:	STRING 
atom: str_seq
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
atom: NAME
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comma_expr_star_seq : 	',' expr 
exprlist: 	expr comma_expr_star_seq 
print_stmt: PRINT exprlist 
small_stmt: print_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt list_stmt
suite:	list_stmt END
funcdef:	funcheader suite 
compound_stmt: funcdef
stmt: compound_stmt
list_stmt : stmt list_stmt
suite:	list_stmt END
classdef: classheader suite
class_h: CLASS ID 
suite:	END
classdef: classheader suite
temp2: classdef 
temp2: classdef temp2
program : temp2 
file_input: program ENDMARKER
