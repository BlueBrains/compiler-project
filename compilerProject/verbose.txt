class_h: CLASS ID 
atoms: DEF NAME
compound_stmt: vardef
small_stmt: expr_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt
access_modef:	PUBLIC
parameters:'(' ')'
funcheader: DEF access STATIC NAME parameters ':'  
atom: NAME
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comp_op: '>' 
atom: NUMBER_INT 0
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comp_op_seq: comp_op expr 
comparison: expr comp_op_seq
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
testlist_comp: test
atom:	'(' testlist_comp ')' 
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
while_header:  WHILE test ':' 
atom: NAME
power:	atom
factor: power
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
exprlist: 	expr 
print_stmt: PRINT exprlist 
small_stmt: print_stmt 
simple_stmt: small_stmt ';' 
stmt:	simple_stmt 
list_stmt : stmt
suite:	list_stmt END
while_stmt: WHILE test ':' suite 
compound_stmt: while_stmt
stmt: compound_stmt
list_stmt : stmt
suite:	list_stmt END
funcdef:	funcheader suite 
compound_stmt: funcdef
stmt: compound_stmt
list_stmt : stmt list_stmt
suite:	list_stmt END
classdef: classheader suite
temp2: classdef 
program : temp2 
file_input: program ENDMARKER
