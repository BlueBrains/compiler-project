class_h: CLASS ID 
inside_func:'(' atom: NAME
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
argument: 	test
arg_comma_seq : argument ','
atom: NAME
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
in_default: '='
atom: NUMBER_INT 2
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
default_arg: test in_default test
default_arg_comma_seq: default_arg ','
atom: NAME
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
in_default: '='
atom: NUMBER_INT 1
power:	atom
term: 	factor
arith_expr: term
shift_expr: arith_expr
and_expr: shift_expr
xor_expr: and_expr
expr: xor_expr
comparison: expr
not_test:	comparison
and_test:	not_test
or_test:	and_test
test:	or_test
default_arg: test in_default test
arglist: arg_comma_seq default_arg_comma_seq default_arg
inside_func arglist ')'
funcheader: DEF NAME parameters ':' 
suite:	END
funcdef:	funcheader suite 
compound_stmt: funcdef
stmt: compound_stmt
list_stmt : stmt
suite:	list_stmt END
classdef: classheader suite
temp2: classdef 
program : temp2 
file_input: program ENDMARKER
